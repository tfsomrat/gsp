<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js"></script><script>axios.get(appUrl + 'isInstalled', {
        params: {
            shop: "{{ shop.permanent_domain }}"
        }
    }).then(function(response) {
        if (response.data.status == '404'){
            var elem = document.querySelector('#pickup-container');
            elem.parentNode.removeChild(elem);
        } else {
            var pickupContainer = document.getElementById("pickup-container");
            if (pickupContainer) {
                pickupContainer.classList.remove("hide");
            }

            var pickupLoadingContainer = document.querySelector('.pickup-loading');
            if (pickupLoadingContainer) {
                pickupLoadingContainer.classList.add("hide");
            }

            var storeForm = pickupContainer.closest("form");
            //storeForm.action += '?locale={{ shop.locale }}';
            //
            {% assign language = cart.attributes["language"] %}
            {% if language == nil %}
            {% assign language = shop.metafields["languages"]["default"] %}
            {% endif %}
            {% assign langify_locale = shop.metafields.language_codes[language] %}
            {% if langify_locale %}
            {% capture language_code %}{{langify_locale}}{% endcapture %}
            if (storeForm.action.indexOf('locale=') > -1){
                storeForm.action = storeForm.action.replace(/\?locale=(.*)\&?/ig, '?locale={{ langify_locale }}&step=contact_information')
            } else {
                storeForm.action += '?locale={{ langify_locale }}&step=contact_information';
            }
            {% else %}
            storeForm.action += '?locale={{ shop.locale }}&step=contact_information';
            {% endif %}
        }
    }).catch(function (error) {
        console.log(error);
    })</script><script type="text/javascript">!function(n){var t={};function i(e){if(t[e])return t[e].exports;var r=t[e]={i:e,l:!1,exports:{}};return n[e].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=n,i.c=t,i.d=function(e,r,n){i.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(r,e){if(1&e&&(r=i(r)),8&e)return r;if(4&e&&"object"==typeof r&&r&&r.__esModule)return r;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:r}),2&e&&"string"!=typeof r)for(var t in r)i.d(n,t,function(e){return r[e]}.bind(null,t));return n},i.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(r,"a",r),r},i.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},i.p="",i(i.s="./src/index.js")}({"./src/includes/storepickup.js":function(module,exports,__webpack_require__){eval("var css = `\r\n.loading-times {\r\n    position: absolute;\r\n    top: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    background: #c3c3c3a6;\r\n    z-index: 99999;\r\n}\r\n.picker__holder {\r\n    bottom: 75px;\r\n}\r\n#pickup-store-search {\r\n        background-position: 10px 12px;\r\n        /* Position the search icon */\r\n        background-repeat: no-repeat;\r\n        /* Do not repeat the icon image */\r\n        font-size: 16px;\r\n        /* Increase font-size */\r\n        padding: 12px 20px 12px 12px;\r\n        /* Add some padding */\r\n        border: 1px solid #ddd;\r\n        /* Add a grey border */\r\n        margin-bottom: 12px;\r\n        /* Add some space below the input */\r\n    }\r\n\r\n    #storeUL {\r\n        list-style-type: none;\r\n        padding: 0;\r\n        margin: 0;\r\n        overflow: auto;\r\n        border: 1px solid #dadada;\r\n        border-radius: 4px;   \r\n        max-height: 240px;\r\n        overflow-y: auto;\r\n        margin-top: 0;\r\n        width: 100%;\r\n    }\r\n\r\n    #storeUL li {\r\n        margin-bottom: 0;\r\n        border-bottom: 1px solid #efefef;\r\n    }\r\n\r\n    #storeUL li a {\r\n        padding: 12px;\r\n        /* Add some padding */\r\n        text-decoration: none;\r\n        /* Remove default text underline */\r\n        display: block;\r\n        /* Make it into a block element to fill the whole list */\r\n    }\r\n\r\n    #storeUL li a.header {\r\n        background-color: #e2e2e2;\r\n        /*Darker background for headers */\r\n        cursor: default;\r\n        /* Change cursor style */\r\n    }\r\n\r\n    #storeUL li a:hover:not(.header) {\r\n        background-color: #eee;\r\n        color: #000;\r\n        /* Add a hover effect to all links, except for headers */\r\n    }\r\n    \r\n    select#storeUL{\r\n        padding: 10px;\r\n    }\r\n\r\n    .activeStore {\r\n        background: #cccccc;\r\n        /* Background for currently selected store */\r\n    }\r\n\r\n    #pickup-header {\r\n        font-size: 0.95em;\r\n        text-decoration: none;\r\n        display: inline;\r\n        position: relative;\r\n        top: -15px;\r\n    }\r\n\r\n    #pickup-box {\r\n        vertical-align: middle;\r\n    }\r\n\r\n    .pickup-hidden {\r\n        display: none!important;\r\n    }\r\n\r\n    #pickup-details{\r\n        min-width: 260px;\r\n        width: 100%;\r\n    }\r\n    \r\n    #pickup-details > div > div {\r\n        width: 100%;\r\n    }\r\n\r\n    #pickup-details input{\r\n        width:100%;\r\n        border: 1px solid #efefef;\r\n    }\r\n\r\n    .hide{\r\n        display: none!important;\r\n    }\r\n    #pickup-container{\r\n        display: flex;\r\n        -ms-flex-direction: column;\r\n        flex-direction: column;\r\n        margin-bottom: 1rem;\r\n        margin-top: 1rem;\r\n        text-align: left;\r\n        align-items: flex-end;\r\n        width: 100%;\r\n        transition: all .4s ease-out;\r\n    }\r\n    .pickup-button{\r\n        border: 1px solid #efefef;\r\n        border-radius: 2px;\r\n        padding: 10px;\r\n        margin-bottom: 20px;\r\n        display: inline-block;\r\n        text-align: center;\r\n        margin-top: 20px;\r\n        margin-right: 0!important;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .selected{\r\n        background: #f7f7f7;       \r\n        color: #1a1a1a;\r\n        border: 1px solid #1a1a1a;\r\n    }      \r\n    .away{\r\n        position: fixed;\r\n        top: -1000px;\r\n    }\r\n    #ajaxifyCart, .drawer--has-fixed-footer .drawer__inner{\r\n        overflow: auto;\r\n    }\r\n    #pickup-container .picker__list{\r\n        padding: 0;\r\n    }\r\n    #CartDrawer #pickup-container .pickup-button{\r\n        width: 100%;\r\n    }  \r\n    .main-content{\r\n        overflow: visible;\r\n    }   \r\n    .cr-store-title{\r\n        text-align: center;\r\n    }  \r\n    .cr-store-details{\r\n        display: flex;\r\n    }\r\n    .cr-more-details{\r\n        text-align: center;\r\n        width: 50%;\r\n        border: 1px dashed #c4c4c4;\r\n    }\r\n    .cr-store-address{\r\n        width: 50%;\r\n    }\r\n    #cr-delivery-time_root .picker__list-item.picker__list-item--disabled {\r\n        display: none;\r\n    }\r\n    #cr-delivery-details {\r\n        margin-top: 10px;\r\n        width: 100%;\r\n        position: relative;\r\n    }\r\n    .picker--time,.picker__holder {\r\n        left: 0;\r\n    }\r\n    #cr-delivery-details input{\r\n        width: 100%;\r\n    }\r\n    .cr-form-row {\r\n        display: block;\r\n        margin-top: 10px;\r\n    }\r\n    .svg-icon {\r\n      \r\n    }\r\n    \r\n    .svg-icon path,\r\n    .svg-icon polygon,\r\n    .svg-icon rect {\r\n      fill: #4691f6;\r\n    }\r\n    \r\n    .svg-icon circle {\r\n      stroke: #4691f6;\r\n      stroke-width: 1;\r\n    }\r\n    \r\n    .cr-icon-search {\r\n        width: 20px;   \r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        margin: 10px;\r\n        cursor: pointer;\r\n    }\r\n    \r\n    .cr-zip-search {\r\n        position: relative;\r\n    }\r\n    \r\n    .min-order-message{\r\n        font-weight: bold;\r\n        margin: 10px;\r\n        display: block;\r\n    }\r\n    \r\n    #cr-delivery-details .picker--time {\r\n        top: 165px;\r\n    }\r\n    \r\n    #pickup-date-start {\r\n        cursor: pointer;\r\n    }\r\n    \r\n    #pickup-details #storeUL .cr-radio-wrapper{       \r\n        text-align: left;\r\n        height: 10px;\r\n        width: 25px;\r\n        padding: 0;\r\n        margin: 0;\r\n    }\r\n    #pickup-details #storeUL .cr-radio{\r\n        width: 14px;\r\n        margin: 4px 0 0 0;\r\n        padding: 0;\r\n        height: auto;\r\n    }\r\n`;\r\n\r\nvar defaultPickupTranslation = {\r\n    \"en\": {\r\n        \"textButton\": \"Pickup In Store\",\r\n        \"pickupDate\": \"Pickup Date\",\r\n        \"pickupDateError\": \"Please enter a pickup date.\",\r\n        \"deliveryDateError\": \"Please choose a delivery date.\",\r\n        \"nameOfPersonCollecting\": \"Name of Person Collecting\",\r\n        \"shippingMethod\": \"Shipping\",\r\n        \"pleaseClickCheckout\": \"Please click the checkout button to continue.\",\r\n        \"mandatoryForPickupText\": \"An item in your cart must be collected\",\r\n        \"chooseADateTime\": \"Choose a date/time\",\r\n        \"deliveryDay\": \"Delivery day\",\r\n        \"chooseADeliveryDay\": \"Choose a delivery slot\",\r\n        \"yourName\": \"Your Name\",\r\n        \"pickupFirstName\": \"First Name\",\r\n        \"pickupLastName\": \"Last Name\",\r\n        \"contactNumber\": \"Contact Number\",\r\n        \"pickupEmail\": \"Email address\",\r\n        \"pickupStore\": \"Pickup Store\",\r\n        \"chooseLocation\": \"Choose a location below for pickup\",\r\n        \"chooseLocationOption\": \"Please choose a location\",\r\n        \"nameOfPersonCollectingError\": \"Please enter who will be picking up your order.\",\r\n        \"pickupFirstNameError\": \"Enter a first name\",\r\n        \"pickupLastNameError\": \"Enter a last name\",\r\n        \"storeSelectError\": \"Please select which store you will pick up from\",\r\n        \"extra1Placeholder\": \"\",\r\n        \"extra2Placeholder\": \"\",\r\n        \"extra3Placeholder\": \"\",\r\n        \"contactNumberError\": \"Please enter a phone number.\",\r\n        \"emailError\": \"Please enter your email address\",\r\n        \"extraField1Error\": \"You must complete this field\",\r\n        \"extraField2Error\": \"You must complete this field\",\r\n        \"extraField3Error\": \"You must complete this field\",\r\n\r\n        \"minOrderMessage\": \"To select delivery, your order must be over\",\r\n    }\r\n};\r\nvar CRproductCollections = document.querySelectorAll('.storepickup-product-collection'), i;\r\nvar crCartProductIds = document.querySelectorAll('.cr-item-id');\r\nvar CRpickupContainer = document.getElementById(\"pickup-container\");\r\n//var storeForm = pickupContainer.closest(\"form\");\r\n\r\nvar CRexcludedFromPickup = false;\r\nvar CRmandatoryForPickup = false;\r\n\r\ndocument.addEventListener('crJQActivated', function (e) {\r\n    var CRmandatoryCollections = [];\r\n    var CRexcludeCollections = [];\r\n    var CRexcludedProducts = [];\r\n\r\n    for (var c in storePickupSettings.mandatory_collections) {\r\n        // Some stores have extra functions inside an empty array, this will cause errors, to prevent it we check for undefined\r\n        if(storePickupSettings.mandatory_collections[c].title === undefined) continue;\r\n        CRmandatoryCollections.push(storePickupSettings.mandatory_collections[c].title.replace(/'/g, '&apos;'));\r\n    }\r\n    for (var c in storePickupSettings.exclude_collections) {\r\n        if(storePickupSettings.exclude_collections[c].title === undefined) continue;\r\n        CRexcludeCollections.push(storePickupSettings.exclude_collections[c].title.replace(/'/g, '&apos;'));\r\n    }\r\n    if (typeof storePickupSettings.exclude_products !== \"undefined\" && storePickupSettings.exclude_products.length) {\r\n        for (var c in storePickupSettings.exclude_products) {\r\n            var prod = storePickupSettings.exclude_products[c];\r\n            if (typeof prod.id === 'undefined') continue;\r\n            CRexcludedProducts.push(prod.id.replace('gid://shopify/ProductVariant/', ''));\r\n        }\r\n    }\r\n\r\n\r\n    for (i = 0; i < CRproductCollections.length; ++i) {\r\n        var value = CRproductCollections[i].innerHTML.replace(/'/g, '&apos;').replace(/&amp;/, '&');\r\n        // If there is an item in the cart exluded from pickup, we'll not display the store pickup option at all\r\n        if (CRexcludeCollections.indexOf(value) > -1) {\r\n            CRexcludedFromPickup = true;\r\n        }\r\n        if (CRmandatoryCollections.indexOf(value) > -1) {\r\n            CRmandatoryForPickup = true;\r\n            storePickup.hideButtonsAndDisplayMandatoryText()\r\n            break;\r\n        }\r\n    }\r\n\r\n    for (i = 0; i < crCartProductIds.length; ++i) {\r\n        var prId = crCartProductIds[i].innerHTML;\r\n        if (CRexcludedProducts.indexOf(prId) > -1) {\r\n            CRexcludedFromPickup = true;\r\n            break;\r\n        }\r\n    }\r\n\r\n    //\r\n    storePickup.excludeFromPickup()\r\n})\r\n\r\n// if pressing add to cart multiple times (without refreshing the page), pickup buttons dissapears\r\nvar storePickup = {\r\n    $: {},\r\n    storeIds: [],\r\n    pickupStore: '',\r\n    shippingInformation: '',\r\n    pickupButtonText: '',\r\n    translations: {},\r\n    language: 'en',\r\n    selectedStoreId: null,\r\n    formattedDate: null,\r\n    formattedDateTime: null,\r\n    unixTimestamp: null,\r\n    deliverySelectedDay: null,\r\n    datePicker: null,\r\n    deliveryDatePicker: null,\r\n    overridingRules: [],\r\n    cart: {},\r\n    hideButtonsAndDisplayMandatoryText: function(){\r\n        if (typeof document.querySelector('.pickup-button') !== 'undefined' && document.querySelector('.pickup-button')) {\r\n            document.querySelector('.pickup-button').style = 'display: none;';\r\n        }\r\n\r\n        if (typeof document.querySelector('.cr-delivery-button') !== 'undefined' && document.querySelector('.cr-delivery-button')) {\r\n            document.querySelector('.cr-delivery-button').style = 'display: none;';\r\n        }\r\n\r\n        var newItem = document.createElement(\"span\");\r\n        newItem.classList.add(\"cr-mandatory-for-pickup\");\r\n        newItem.style = 'font-weight: bold;';\r\n        var mandatoryForPickupText = pickupTranslations.en.mandatoryForPickupText;\r\n        var textnode = document.createTextNode(mandatoryForPickupText);\r\n        newItem.appendChild(textnode);\r\n        var mandatorySpan = document.querySelector('.cr-mandatory-for-pickup');\r\n        if (CRpickupContainer && !mandatorySpan) {\r\n            CRpickupContainer.insertBefore(newItem, CRpickupContainer.childNodes[0]);\r\n        }\r\n    },\r\n    excludeFromPickup: function(cart) {\r\n        var that = this;\r\n        if (CRexcludedFromPickup === true && CRmandatoryForPickup === false && typeof skipExcludedCheck === 'undefined') {\r\n            if (typeof crDeliverySettings !== \"undefined\" && crDeliverySettings.enabled === true) {\r\n\r\n                if (typeof document.querySelector('.pickup-button') !== 'undefined' && document.querySelector('.pickup-button')) {\r\n                    document.querySelector('.pickup-button').style = 'display: none;';\r\n                    document.querySelector('.pickup-button').classList.remove(\"selected\");\r\n                }\r\n            } else {\r\n                if (document.querySelector('#pickup-container')) {\r\n                    document.querySelector('#pickup-container').remove();\r\n                }\r\n            }\r\n\r\n\r\n            // Remove pickup and refresh the page if only the pickup item is in the cart\r\n            var productData = {quantity: 0,id: pickupProduct};\r\n\r\n            jqCR.getJSON('/cart', function(response){\r\n                var items = response.items;\r\n                var attributes = response.attributes;\r\n                attributes['Pickup_Information'] = '';\r\n                attributes['Pickup_StoreID'] = '';\r\n                attributes['_unixTimestamp'] = '';\r\n                attributes['_formattedDate'] = '';\r\n\r\n                attributes['Pickup_date'] = '';\r\n                attributes['Pickup_time']  = '';\r\n                attributes['Pickup_name']  = '';\r\n                attributes['Pickup_phone']  = '';\r\n                attributes['Pickup_extra1']  = '';\r\n                attributes['Pickup_extra2']  = '';\r\n                attributes['Pickup_extra3']  = '';\r\n                attributes['Pickup_Store']  = '';\r\n                attributes['pickup']  = '';\r\n\r\n                var params = {\r\n                    type: 'POST',\r\n                    url: '/cart/update.js',\r\n                    data: {\r\n                        attributes: attributes\r\n                    },\r\n                    dataType: 'json',\r\n                    success: function() {\r\n                        console.log('Updated cart');\r\n                    },\r\n                    error: function(XMLHttpRequest, textStatus) {\r\n                        console.log(XMLHttpRequest, textStatus);\r\n                    }\r\n                };\r\n                jqCR.ajax(params);\r\n\r\n                for (var i in items) {\r\n                    if(String(items[i].id) === pickupProduct) {\r\n                        jqCR.post('/cart/change.js', productData, function() {\r\n                            console.log('refresh');\r\n                            if (pickupProduct) {\r\n                                location.reload();\r\n                            }\r\n\r\n                        }, 'json')\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    },\r\n    init: function(){\r\n        this.$ = jqCR;\r\n\r\n        var crJQEvent = document.createEvent('Event');\r\n        crJQEvent.initEvent('crStorePickupInit', true, true);\r\n        document.dispatchEvent(crJQEvent);\r\n\r\n        if ($ === undefined || $.fn.pickadate === undefined) $ = jQuery;\r\n        if (typeof storePickupLoaded !== \"undefined\"){\r\n            storePickupLoaded = true;\r\n        }\r\n\r\n        //console.log(stores)\r\n        var that = this;\r\n        var settings = this.settings();\r\n\r\n        //** Check if products in the cart have overriding rules **//\r\n        if (typeof crItems !== \"undefined\" && typeof CRoverRidingRules !== \"undefined\") {\r\n            for (var k = 0; k < crItems.length; k++) {\r\n                var itemCollections = crItems[k].collections;\r\n                var itemTitle = crItems[k].name;\r\n                var itemId = crItems[k].id;\r\n                //@todo \"Pickup instore\" might have its name changed, need to check by variant id\r\n                if (itemTitle === 'Pickup Instore') continue;\r\n\r\n                //console.log('--\x3e', itemCollections)\r\n                // Looping trough the overriding rules\r\n                for (var l = 0; l < CRoverRidingRules.length; l++) {\r\n                    const ruleProducts = CRoverRidingRules[l].products;\r\n\r\n                    //@to do choose what to do when there are multiple overriding products (which one will take precedence)\r\n                    // Loop trough the rule products (overriding products)\r\n                    let found = false;\r\n                    for (let m = 0; m < ruleProducts.length; m++) {\r\n                        var ruleVariants = ruleProducts[m].variants;\r\n                        for (let n  = 0; n < ruleVariants.length; n++) {\r\n\r\n                            var overridingProductId = ruleVariants[n].plainVariantId;\r\n                            //var collectionName = ruleProducts[m].collectionName; // this is used if filtering should be done based on collection name, not product id\r\n                            //console.log({overridingProductId, itemId})\r\n                            if (\r\n                                (overridingProductId !== null && overridingProductId != itemId)\r\n                                //@todo check if collection name is matched\r\n                            ) continue;\r\n                            found = true;\r\n                            //console.log({overridingProductId, ruleEnabledDates})\r\n                        }\r\n                    }\r\n\r\n                    if (found) {\r\n                        that.overridingRules.push(CRoverRidingRules[l])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //** End check **//\r\n\r\n        // Used on setting up blackout dates\r\n        for (var n in stores) {\r\n            if (stores[n].storeID === undefined) continue;\r\n            that.storeIds[stores[n].storeID] = stores[n];\r\n        }\r\n\r\n        that.translations = typeof pickupTranslations !== \"undefined\"? pickupTranslations : defaultPickupTranslation;\r\n        //if (window.location.pathname == '/cart') return;\r\n\r\n        this.injectButton(that.setPickupButtonValues.bind(that));\r\n\r\n        // new pickup version\r\n        that.getCartItems().then(function(response) {\r\n            if(typeof CRcarrierServiceEnabled !== \"undefined\" && CRcarrierServiceEnabled === true && response.items.length) {\r\n                that.addLineProperty(response, 'shipping');\r\n                //that.updateCheckouts(response)\r\n            }\r\n        })\r\n\r\n        var body = jqCR('body');\r\n        body.on('click tap', '.js-toggle-pickup', function(e){\r\n            if (typeof disablePickupButton !== \"undefined\" && disablePickupButton === true) return;\r\n            if (jqCR('.js-toggle-pickup').hasClass('selected') && jqCR(this).hasClass('cr-delivery-method')) return;\r\n            e.preventDefault();\r\n            console.log('click');\r\n            jqCR(this).toggleClass('selected');\r\n\r\n            // new pickup version\r\n            if(typeof CRcarrierServiceEnabled !== \"undefined\" && CRcarrierServiceEnabled === true){\r\n                that.getCartItems().then(function(response) {\r\n                    if(response.items.length) {\r\n                        console.log('Add line property #3')\r\n                        that.addLineProperty(response, 'pickup');\r\n                    }\r\n                })\r\n            }\r\n\r\n            storePickup.pickupBoxChange.apply(that);\r\n        });\r\n\r\n        // Disable pickup and choose shipping\r\n        body.on('click tap', '.cr-shipping-method', function(e){\r\n            if (jqCR(this).hasClass('selected')) return;\r\n            // jqCR('.js-toggle-pickup').click()\r\n            jqCR('.js-toggle-pickup, .cr-delivery-button').removeClass('selected');\r\n            that.pickupBoxChange.apply(that);\r\n            jqCR('#cr-delivery-details').hide();\r\n        })\r\n\r\n        // Delivery\r\n        body.on('click tap', '.cr-delivery-button', function(e){\r\n            if (jqCR(this).hasClass('selected')) return;\r\n            console.log('activate delivery')\r\n            that.activateDelivery();\r\n        })\r\n\r\n        if (settings.shippingEnabled === false && crDeliverySettings.enabled === true) {\r\n            var isDeliverySelected = jqCR('.cr-delivery-button').hasClass('selected');\r\n            //@todo check if there are mandatory for pickup products, if yes, don't enable delivery\r\n            // Only if not already selected\r\n            if (!isDeliverySelected) {\r\n                that.getCartItems()\r\n                    .then((response) => {\r\n                        var inCart = false; // Assume not currently in cart\r\n\r\n                        // Check each item in cart to see if Pickup product currently in the cart\r\n                        for (var item in response.items) {\r\n                            if (response.items[item].variant_id == pickupProduct) {\r\n                                inCart = true;\r\n                            }\r\n                        }\r\n                        // Activate delivery only if pickup was not already selected\r\n                        if (inCart === false) {\r\n                            console.log('## 1 ##')\r\n//                            that.activateDelivery();\r\n                        }\r\n                    });\r\n            }\r\n\r\n\r\n        }\r\n\r\n        // If delivery is disabled, remove the delivery product from the cart\r\n        if (typeof crDeliverySettings !== 'undefined' && crDeliverySettings.enabled === false) {\r\n            that.removeDeliveryProduct();\r\n        }\r\n\r\n        that.listenEvents();\r\n    },\r\n\r\n    activateDelivery: function(){\r\n        console.log('** Activate delivery **')\r\n        var that = this;\r\n        if (!crDeliverySettings.enabled) {\r\n\r\n            that.removeDeliveryProduct();\r\n            return;\r\n        }\r\n\r\n        var form = this.submitForm();\r\n        var localeChunks = pickupLocale.split('-');\r\n        var formAction = jqCR(form).attr('action');\r\n\r\n        if (typeof formAction === \"undefined\") {\r\n            console.log('Form not present')\r\n            return;\r\n        }\r\n\r\n        jqCR('[name=checkout]').attr('disabled', 'disabled');\r\n        // Check for conditional activation\r\n        jqCR.getJSON('/cart', function(response){\r\n            if(typeof CRcarrierServiceEnabled !== \"undefined\" && CRcarrierServiceEnabled === true && response.items.length) {\r\n                that.addLineProperty(response, 'delivery')\r\n            }\r\n\r\n            var totalPrice = response.total_price / 100;\r\n            if (totalPrice > crDeliverySettings.orderValue) {\r\n                jqCR('[name=checkout]').removeAttr('disabled');\r\n            } else {\r\n                jqCR('.min-order-message').remove();\r\n                var minOrderMessage = that.translations[that.language].minOrderMessage || defaultPickupTranslation.en.minOrderMessage;\r\n                const message = '<span class=\"min-order-message\">' + minOrderMessage + ' ' + crDeliverySettings.orderValue + '</span>'\r\n                jqCR('[name=checkout]').before(message);\r\n            }\r\n        })\r\n\r\n        if (formAction.indexOf('/cart?') > -1) {\r\n            formAction += '&locale=' + localeChunks[0] + '-CRdelivery&skip_shopify_pay=true&step=contact_information'\r\n        } else {\r\n            formAction += '?locale=' + localeChunks[0] + '-CRdelivery&skip_shopify_pay=true&step=contact_information'\r\n        }\r\n        jqCR(form).attr('action', formAction);\r\n\r\n        //this.$(form).attr('action', '/checkout?' + this.shippingInformation + '&skip_shopify_pay=true' + '&locale=' + localeChunks[0] + '-pickup');\r\n\r\n        jqCR('.cr-delivery-button').addClass('selected');\r\n        jqCR('.cr-shipping-method, .js-toggle-pickup').removeClass('selected');\r\n        jqCR('.delivery-method-desc').addClass('hide');\r\n        jqCR('#cr-delivery-details').show();\r\n        jqCR('#pickup-details').hide();\r\n\r\n        // Remove the pickup\r\n        var productData = {quantity: 0, id: pickupProduct}\r\n        jqCR.post('/cart/change.js', productData, function(response) {\r\n            //console.log('Pickup removed');\r\n            if (typeof CRdeliveryProductEnabled === 'undefined' || (typeof CRdeliveryProductEnabled !== 'undefined' && CRdeliveryProductEnabled === true)) {\r\n                // Add delivery item\r\n                that.addDeliveryItem(response);\r\n            }\r\n\r\n        }, 'json')\r\n\r\n\r\n        ///\r\n        var zipNotAvailableError = typeof that.translations[that.language].zipNotAvailableError === \"undefined\"?\r\n            \"Sorry, but we don't deliver in your area\" :  that.translations[that.language].zipNotAvailableError;\r\n\r\n        jqCR.validator.addMethod(\"isValidZip\", function(requestedZip, element) {\r\n            var zips = crDeliverySettings.deliveryZipCodes.split(',');\r\n            const deliveryZipsByDay = typeof crDeliverySettings.deliveryZipsByDay !== 'undefined'? crDeliverySettings.deliveryZipsByDay.split(',') : [];\r\n            const deliveryStyle = typeof crDeliverySettings.deliveryStyle !== 'undefined'? crDeliverySettings.deliveryStyle : 'general';\r\n            const zipsToCheck = deliveryStyle === 'general'? zips : deliveryZipsByDay;\r\n            requestedZip = requestedZip.replace(/\\s+/ig, '')\r\n\r\n            for (var i = 0; i < zipsToCheck.length; i++) {\r\n                var zip = zipsToCheck[i].trim().replace(/\\s/gi, '');\r\n                if (zip === '') continue;\r\n\r\n                var regex = RegExp('^' + zip, 'gi');\r\n                if(regex.test(requestedZip) === true && requestedZip.length >= 4) {\r\n                    //jqCR('.cr-delivery-date-wrapper').removeClass('hidden')\r\n                    return true;\r\n                }\r\n            }\r\n            // Hide the choose a delivery input\r\n            jqCR('.cr-delivery-date-wrapper').addClass('hide')\r\n            return false;\r\n        }, zipNotAvailableError);\r\n\r\n        jqCR(form).validate({\r\n            //debug: true,\r\n            submitHandler: function(currentForm) {\r\n                const deliveryStyle = typeof crDeliverySettings.deliveryStyle !== 'undefined'? crDeliverySettings.deliveryStyle : 'general';\r\n                jqCR('.cart__checkout--page').removeClass('btn--loading');\r\n                jqCR('.cart__checkout').removeClass('btn--loading');\r\n                const selectedZip = jqCR('#cr-delivery-zip').val();\r\n\r\n                if(typeof crDeliverySettings !== \"undefined\" && crDeliverySettings.askForZip === true) {\r\n                    //storePickup.checkDeliveryConditions()\r\n                    if (deliveryStyle === 'byDay') {\r\n                        storePickup.checkDeliveryZipConditions()\r\n                    } else {\r\n                        // Disable the date picker if no days are enabled\r\n                        that.disableDatePickerIfNoDaysAreEnabled()\r\n\r\n                        // Display delivery date picker field\r\n                        that.displayDeliveryDatePickerField();\r\n\r\n                        var blackoutdatesCollection = that.getBlackoutDeliveryDays();\r\n\r\n                        storePickup.disableDeliveryDays(blackoutdatesCollection)\r\n                    }\r\n\r\n                    var isFormValid = form.valid();\r\n\r\n                    if (isFormValid === true) {\r\n                        var formAction = jqCR(currentForm).attr('action');\r\n                        formAction = formAction.replace(/\\&checkout\\[shipping_address\\]\\[zip\\]=(.*?)&/ig, '&')\r\n                        formAction = formAction + '&checkout[shipping_address][zip]=' + selectedZip + '&'\r\n                        jqCR(currentForm).attr('action', formAction);\r\n                        currentForm.submit();\r\n                    }\r\n                } else {\r\n                    currentForm.submit();\r\n                }\r\n\r\n            }\r\n            //submitHandler: that.validateSubmiHandler.bind(that)\r\n        });\r\n        var deliveryDateError = typeof that.translations[that.language].deliveryDateError === \"undefined\"?\r\n            \"Please choose a delivery date\" :  that.translations[that.language].deliveryDateError;\r\n\r\n\r\n        jqCR(\"#delivery-date-start\").rules('add', {\r\n            \"required\": true,\r\n            \"messages\": {\r\n                \"required\": deliveryDateError\r\n            }\r\n        });\r\n\r\n        jqCR(\"#cr-delivery-zip\").rules('add', {\r\n            \"required\": true,\r\n            \"messages\": {\r\n                \"required\": deliveryDateError\r\n            },\r\n            \"isValidZip\": true\r\n        });\r\n\r\n        if (typeof crDeliverySettings !== \"undefined\" && crDeliverySettings.askForZip === true) {\r\n            var askForZipError = typeof that.translations[that.language].askForZipError === \"undefined\"?\r\n                \"Please enter a valid zipcode\" :  that.translations[that.language].askForZipError;\r\n\r\n            jqCR(\"#cr-delivery-zip\").rules('add', {\r\n                \"required\": true,\r\n                \"messages\": {\r\n                    \"required\": askForZipError\r\n                }\r\n            });\r\n        }\r\n\r\n        var crDeliveryEvent = document.createEvent('Event');\r\n        crDeliveryEvent.initEvent('crDeliveryActivated', true, true);\r\n        document.dispatchEvent(crDeliveryEvent);\r\n    },\r\n\r\n    // Set initial blacked out delivery days\r\n    getBlackoutDeliveryDays: function() {\r\n        var yesterday = new Date((new Date()).valueOf() - 1000 * 60 * 60 * 36);\r\n        var blackoutdatesCollection = [];\r\n        blackoutdatesCollection.push(yesterday); // In case same day is enabled, yesterday must be disabled anyway\r\n\r\n        // Set blacked out days\r\n        let disableDays = this.getDisabledDaysArray();\r\n        let deliveryDays = crDeliverySettings.deliveryDays || [];\r\n\r\n        // Disable specific days\r\n        if (typeof deliveryDays !== 'undefined' && deliveryDays !== null && deliveryDays.length) {\r\n            disableDays.map(item => {\r\n                blackoutdatesCollection.push(item)\r\n            });\r\n        }\r\n        return blackoutdatesCollection;\r\n    },\r\n\r\n    isZipValid: function(requestedZip) {\r\n        if (typeof crDeliverySettings === \"undefined\") return false;\r\n\r\n        var zips = crDeliverySettings.deliveryZipCodes.split(',');\r\n\r\n        for (var i = 0; i < zips.length; i++) {\r\n            var zip = zips[i].trim().replace(/\\s/, '');\r\n\r\n            var regex = RegExp('^' + zip, 'gi');\r\n            if(regex.test(requestedZip) === true) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    setPickupButtonValues: function(){\r\n        var settings = storePickupSettings;\r\n        var that = this;\r\n        if (typeof crDeliverySettings !== \"undefined\") {\r\n            that.setDeliveryPicker();\r\n        }\r\n        that.setDatePicker();\r\n        that.displayStores();\r\n        that.initShippingInformation();\r\n\r\n        // Pickup button text\r\n        var cr_button_text = settings.button_text === undefined? 'Pick Up In Store' : settings.button_text;\r\n        if (cr_button_text.trim() === '') cr_button_text = 'Pick Up In Store';\r\n        that.pickupButtonText = cr_button_text;\r\n        //jqCR('.pickup-button > span').text(that.pickupButtonText);\r\n        that.changePickupButtonText();\r\n\r\n        // Hide loading\r\n        jqCR('.pickup-loading').addClass('hide');\r\n\r\n        // Display pickup container\r\n        jqCR('#pickup-container').removeClass('hide');\r\n\r\n        // Display checkout button\r\n        var form = that.submitForm();\r\n        jqCR(form).find('[name=\"checkout\"]').css('display', 'inline-block')\r\n\r\n        // Extra message\r\n        if (settings.message !== undefined && settings.message != '') {\r\n            jqCR('.js-storepickup-message').html(settings.message);\r\n        }\r\n\r\n        // If disabled, hide it\r\n        if (settings.disabled === true) {\r\n            jqCR('#pickup-container').addClass('hide');\r\n            return;\r\n        }\r\n\r\n        // Check for a mandatory product\r\n        var isMandatory = that.checkForMandatoryProduct();\r\n\r\n        // Check if shipping and delivery are disabled\r\n        if ((settings.shippingEnabled === false && typeof crDeliverySettings !== 'undefined' && !crDeliverySettings.enabled)\r\n            || (settings.shippingEnabled === false && typeof crDeliverySettings === 'undefined')\r\n        ) {\r\n            isMandatory = true;\r\n            storePickup.hideButtonsAndDisplayMandatoryText()\r\n        }\r\n\r\n        if ((isMandatory === true && typeof excludedFromPickup !== \"undefined\" && excludedFromPickup === false) ||\r\n            (isMandatory === true && typeof excludedFromPickup === \"undefined\")\r\n        ){\r\n            // Hide other delivery methods\r\n            jqCR('.cr-shipping-method').addClass('hide');\r\n            that.activatePickupButton();\r\n            // new pickup version\r\n            if(typeof CRcarrierServiceEnabled !== \"undefined\" && CRcarrierServiceEnabled === true){\r\n                that.getCartItems().then(function(response) {\r\n                    if(response.items.length) {\r\n                        console.log('Add line property #5')\r\n                        that.addLineProperty(response, 'pickup');\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n\r\n            // check if already in the cart\r\n            that.getCartItems().then((response) => {\r\n                storePickup.cart = response;\r\n                let found = false;\r\n                let deliveryProductFound = false;\r\n                let giftCard = false;\r\n\r\n                for (var item in response.items) {\r\n                    if (response.items[item].variant_id === parseInt(pickupProduct)) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n\r\n                    if (typeof deliveryProduct !== \"undefined\" && response.items[item].variant_id === parseInt(deliveryProduct)) {\r\n                        deliveryProductFound = true;\r\n                        break;\r\n                    }\r\n\r\n                    if (response.items[item].gift_card === true) {\r\n                        giftCard = true;\r\n                    }\r\n                }\r\n\r\n                if (giftCard === true && typeof skipExcludedCheck === 'undefined') {\r\n                    jqCR('#pickup-container').addClass('hide');\r\n                }\r\n\r\n                if ((found === true && typeof excludedFromPickup !== \"undefined\" && excludedFromPickup === false) ||\r\n                    (found === true && typeof excludedFromPickup == \"undefined\")\r\n                ) {\r\n                    that.activatePickupButton()\r\n                } else if(deliveryProductFound === true){\r\n                    var isDeliverySelected = jqCR('.cr-delivery-button').hasClass('selected');\r\n                    if (!isDeliverySelected) {\r\n                        console.log('## 2 ## ', isDeliverySelected)\r\n                        that.activateDelivery();\r\n                    }\r\n                } else if(settings.shippingEnabled === false && crDeliverySettings.enabled === true){\r\n                    // Shipping is disabled and by default an option must be displayed\r\n                    if (typeof crShowPickupFirst !== 'undefined' && crShowPickupFirst === true) {\r\n                        // Display pickup option as selected first\r\n                        that.activatePickupButton()\r\n                        //jqCR('.js-toggle-pickup').click();\r\n                    } else {\r\n                        that.activateDelivery();\r\n                    }\r\n                } else if(settings.saveOnChange){ //remove pickup attributes if save on change is active\r\n                    //remove pickup cart attributes\r\n                    var attributes = {};\r\n                    attributes['Pickup_Information'] = '';\r\n                    attributes['Pickup_StoreID'] = '';\r\n                    attributes['_unixTimestamp'] = '';\r\n                    attributes['_formattedDate'] = '';\r\n\r\n                    attributes['Pickup_date'] = '';\r\n                    attributes['Pickup_time']  = '';\r\n                    attributes['Pickup_name']  = '';\r\n                    attributes['Pickup_phone']  = '';\r\n                    attributes['Pickup_extra1']  = '';\r\n                    attributes['Pickup_extra2']  = '';\r\n                    attributes['Pickup_extra3']  = '';\r\n                    attributes['Pickup_Store']  = '';\r\n                    attributes['pickup']  = '';\r\n\r\n                    that.updateCartAttributes(attributes)\r\n                }\r\n            })\r\n        }\r\n    },\r\n\r\n    addLineProperty: function(cart, deliveryMethod){\r\n\r\n        if (typeof CRcarrierServiceEnabled === \"undefined\" || (typeof CRcarrierServiceEnabled !== \"undefined\" && CRcarrierServiceEnabled !== true)) {\r\n            return;\r\n        }\r\n        var items = cart.items;\r\n        var crIdFound = false;\r\n        var itemIndex = 1;\r\n        var itemId = 0;\r\n        var foundQuantity = 0;\r\n        for (var i = 0; i < items.length; i++) {\r\n            var item = items[i];\r\n\r\n            if (typeof pickupProduct !== 'undefined' && Number(pickupProduct) === item.id){\r\n                deliveryMethod = 'pickup';\r\n            }\r\n\r\n            if (typeof deliveryProduct !== 'undefined' && Number(deliveryProduct) === item.id){\r\n                deliveryMethod = 'delivery';\r\n            }\r\n\r\n            if (items[i].properties === null) continue;\r\n            if (items[i].properties['_CRid']) {\r\n                crIdFound = true;\r\n                itemIndex = i + 1;\r\n                itemId = items[i].id;\r\n                foundQuantity = items[i].quantity\r\n                //break;\r\n            }\r\n        }\r\n\r\n        var properties = items[itemIndex - 1].properties || {};\r\n        if (foundQuantity === 0) {\r\n            foundQuantity = items[0].quantity;\r\n        }\r\n\r\n        var params = {};\r\n\r\n        properties['_CRid'] = cart.token;\r\n        properties['_deliveryMethod'] = deliveryMethod;\r\n        params = {\r\n            'line': itemIndex,\r\n            'properties': properties,\r\n            'quantity': foundQuantity\r\n        }\r\n        //console.log(params)\r\n        var req = {\r\n            type: 'POST',\r\n            url: '/cart/change.js',\r\n            data: params,\r\n            dataType: 'json',\r\n            success: function(res) {\r\n                //console.log(res);\r\n                const crPickupEvent = document.createEvent('Event');\r\n                crPickupEvent.initEvent('crLineItemUpdated', true, true);\r\n                document.dispatchEvent(crPickupEvent);\r\n            },\r\n            error: function(XMLHttpRequest, textStatus) {\r\n                console.log(XMLHttpRequest, textStatus);\r\n                const crPickupEvent = document.createEvent('Event');\r\n                crPickupEvent.initEvent('crLineItemUpdateFailed', true, true);\r\n                document.dispatchEvent(crPickupEvent);\r\n            }\r\n        };\r\n        jqCR.ajax(req);\r\n    },\r\n\r\n    updateCheckouts: function(cart){\r\n        var url = 'https://rates.storepickup.io/v1/checkouts';\r\n        var attributes = {\r\n            'cart_token': 1,\r\n            'line_items': { '_CRid': cart.token }\r\n        }\r\n        var params = {\r\n            type: 'POST',\r\n            url: url,\r\n            data: attributes,\r\n            dataType: 'json',\r\n            success: function() {\r\n                //console.log('Updated cart');\r\n            },\r\n            error: function(XMLHttpRequest, textStatus) {\r\n                console.log(XMLHttpRequest, textStatus);\r\n            }\r\n        };\r\n    },\r\n\r\n    changePickupButtonText: function(){\r\n        let that = this;\r\n        jqCR('.pickup-button > span').text(that.pickupButtonText);\r\n        jqCR('#pickup-container').css('display', 'flex')\r\n        if (!that.settings().disabled){\r\n            jqCR('#pickup-container').removeClass('hide')\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Check the contents of the cart and if the pickup product is listed activates the button\r\n     * @param cart\r\n     */\r\n    activatePickupButtonIfItemInCart: function(cart){\r\n        let that = this;\r\n        let found = false;\r\n        for (var item in cart.items) {\r\n            if (cart.items[item].variant_id === parseInt(pickupProduct)) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if (found === true) {\r\n//            that.addLineProperty(cart, 'pickup')\r\n            that.activatePickupButton()\r\n        }\r\n    },\r\n\r\n    // Initialize shipping information that will help fill up the checkout form\r\n    initShippingInformation: function(){\r\n        var shippingInfo = \"step=contact_information&checkout[shipping_address][company]=\" + pickupCompany.replace(/\\#/, '').replace(\"'\", '%27')\r\n            //+ \"&checkout[shipping_address][phone]=\"\r\n            + \"&checkout[shipping_address][address1]=\" + pickupAddress.replace(/\\#/, '').replace(\"'\", '%27') +\r\n            \"&checkout[shipping_address][city]=\" + pickupCity\r\n            + \"&checkout[shipping_address][country]=\" + pickupCountry\r\n            + \"&checkout[shipping_address][zip]=\" + pickupZip\r\n            + \"&checkout[shipping_address][province]=\" + pickupProvince\r\n        ;\r\n        if(this.settings().replaceCustomerName !== undefined && this.settings().replaceCustomerName === 'true') {\r\n            shippingInfo += \"&checkout[shipping_address][last_name]=\" + this.settings().checkoutStoreName\r\n        }\r\n\r\n        if (this.settings().discount !== undefined && this.settings().discount !== ''){\r\n            shippingInfo += \"&discount=\" + this.settings().discount\r\n        }\r\n\r\n        this.shippingInformation = shippingInfo;\r\n        // this.updateFormActionWithShippingInformation();\r\n    },\r\n\r\n    activatePickupButton: function(){\r\n        jqCR('.js-toggle-pickup').addClass('selected');\r\n        this.pickupBoxChange.apply(this);\r\n    },\r\n\r\n    checkForMandatoryProduct: function(){\r\n        var that = this;\r\n        let mandatoryCollections = [];\r\n        for (var c in storePickupSettings.mandatory_collections) {\r\n            let collection = storePickupSettings.mandatory_collections[c].title;\r\n            if (collection === undefined) continue;\r\n            mandatoryCollections.push(collection.replace(/'/g, '&apos;'));\r\n        }\r\n        var gotMandatoryProduct = false;\r\n        jqCR('.storepickup-product-collection').each(function(c) {\r\n            if (mandatoryCollections.indexOf(jqCR(this).text().replace(/'/g, '&apos;')) > -1) {\r\n                gotMandatoryProduct = true;\r\n            }\r\n        });\r\n\r\n        jqCR('.storepickup-product-title').each(function(c) {\r\n            //console.log($jq(this).text())\r\n            if (jqCR(this).text().toLowerCase().replace(/'/g, '&apos;').indexOf('click & collect') > -1 ||\r\n                jqCR(this).text().toLowerCase().replace(/'/g, '&apos;').indexOf('click and collect') > -1 ||\r\n                jqCR(this).text().toLowerCase().replace(/'/g, '&apos;').indexOf('c & c') > -1 ||\r\n                jqCR(this).text().toLowerCase().replace(/'/g, '&apos;').indexOf('c&c') > -1\r\n            ){\r\n                gotMandatoryProduct = true;\r\n            }\r\n        });\r\n\r\n        return gotMandatoryProduct;\r\n    },\r\n\r\n    setDeliveryPicker: function(){\r\n        if (typeof crDeliverySettings === 'undefined') {\r\n            console.log('Delivery settings missing')\r\n            return;\r\n        }\r\n        var that = this;\r\n        var yesterday = new Date((new Date()).valueOf() - 1000 * 60 * 60 * 36);\r\n        if (typeof crDeliverySettings.min_days === 'undefined') crDeliverySettings.min_days = 1; // temp set\r\n        var minDays = crDeliverySettings.min_days && crDeliverySettings.min_days !== 0? new Date((new Date()).valueOf() + 1000 * 60 * 60 * crDeliverySettings.min_days * 24) : new Date();\r\n\r\n        if (Number(crDeliverySettings.min_days) === 0) {\r\n            // Seems that this condition is not required\r\n            //minDays = yesterday;\r\n        }\r\n        var maxDays = crDeliverySettings.max_days && crDeliverySettings.max_days != 0? new Date((new Date()).valueOf() + 1000 * 60 * 60 * crDeliverySettings.max_days * 24) : '';\r\n        const dateFormat = typeof crDeliveryDateFormat === \"undefined\"? 'mmmm d, yyyy' : crDeliveryDateFormat;\r\n\r\n        var $input = jqCR('.cr-delivery-datepicker').pickadate({\r\n            today: '',\r\n            clear: '',\r\n            format: dateFormat,\r\n            close: '',\r\n            min: minDays,\r\n            max:  maxDays,\r\n            onSet: function(item) {\r\n                if (item.select){\r\n                    if ('select' in item) {\r\n                        jqCR('.cart__checkout--page').removeClass('btn--loading');\r\n                        jqCR('.cart__checkout').removeClass('btn--loading');\r\n\r\n                        jqCR('#delivery-attribute').val('1')\r\n                        // Reset pickup values\r\n                        jqCR('#pickup-attribute').val('')\r\n                        jqCR('#pickup-information').val('')\r\n                        jqCR('#pickup-selected-store').val('')\r\n                        jqCR('#pickup-selected-store-id').val('')\r\n                        //jqCR('#pickup-selected-date').val('')\r\n                        jqCR('#pickup-unixtimestamp').val('')\r\n\r\n                        jqCR('#note-pickup-date').val('')\r\n                        jqCR('#note-pickup-time').val('')\r\n                        jqCR('#note-pickup-name').val('')\r\n                        jqCR('#note-pickup-phone').val('')\r\n                        jqCR('#note-pickup-extra1').val('')\r\n                        jqCR('#note-pickup-extra2').val('')\r\n                        jqCR('#note-pickup-extra3').val('')\r\n\r\n                        var selectedDate = new Date(item.select);\r\n                        var formattedDate = selectedDate.toLocaleDateString('en-US');\r\n                        that.formattedDate = formattedDate;\r\n\r\n                        // Displayed date for customers\r\n                        const selectedFormattedDate = this.get();\r\n                        jqCR('#note-delivery-date').val(selectedFormattedDate);\r\n\r\n                        // Update formatted date input\r\n                        jqCR('#pickup-selected-date').val(formattedDate);\r\n\r\n                        var selectedDay = that.shortDays(selectedDate);\r\n                        that.deliverySelectedDay = selectedDay;\r\n\r\n                        if (typeof timepicker !== \"undefined\") {\r\n                            timepicker.clear(); // clear previous values if it was set\r\n                            timepicker.set('enable', true);\r\n\r\n                            // Enable only saved slots\r\n                            var formattedDeliverySlots = that.formatDeliveryTimes(deliverySlots[selectedDay]);\r\n                            if (!deliverySlots[selectedDay].length) {\r\n                                return;\r\n                            }\r\n\r\n                            timepicker.set('disable',\r\n                                formattedDeliverySlots\r\n                            )\r\n\r\n                            setTimeout(timepicker.open, 0)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        var picker = $input.pickadate('picker');\r\n        storePickup.deliveryDatePicker = picker;\r\n        var timeFormat = 'h:i A';\r\n        if (typeof CrDeliveryTimeFormat !== \"undefined\") {\r\n            timeFormat = CrDeliveryTimeFormat;\r\n        }\r\n\r\n        // Set delivery cut off start\r\n        const today = new Date();\r\n        const hour = today.getHours();\r\n        const minutes = today.getMinutes();\r\n        if (crDeliverySettings.allowTimeCutOff === true && crDeliverySettings.cutOffMinPickupDays) {\r\n            const limit = crDeliverySettings.cutOffStartTime;\r\n            const chunks = limit.split(':');\r\n            const limitHours = chunks[0];\r\n            const limitMinutes = chunks[1];\r\n            if ((hour > limitHours) ||\r\n                (limitHours == hour &&  minutes >= limitMinutes)\r\n            ) {\r\n\r\n                minDays = Number(crDeliverySettings.cutOffMinPickupDays);\r\n\r\n                if (picker !== undefined && picker !== null) {\r\n                    picker.set('enable', true)\r\n                    picker.set('min', minDays);\r\n                }\r\n            }\r\n        } else {\r\n            if (picker) {\r\n                picker.set('enable', true)\r\n                picker.set('min', minDays);\r\n            }\r\n        }\r\n        //picker.set('min', 10)\r\n        // Delivery cut off end\r\n\r\n        var timepicker = jqCR('#cr-delivery-time').pickatime({\r\n            clear: '',\r\n            format: timeFormat,\r\n            interval: 15,\r\n            formatLabel: function(time) {\r\n                var slots = deliverySlots[that.deliverySelectedDay];\r\n                for (var i in slots) {\r\n                    if(typeof slots[i] === \"function\") continue;\r\n                    var chunks = slots[i].startTime.split(':');\r\n                    var startHours = Number(chunks[0]);\r\n                    var startMinutes = Number(chunks[1]);\r\n                    if (startHours === time.hour && startMinutes === time.mins) {\r\n                        var deliveryTimeFormat = typeof CrDeliveryTimeFormat === \"undefined\"? 'h:i A' : CrDeliveryTimeFormat;\r\n                        var timeIntervalText = '';\r\n                        var dash = typeof that.translations[that.language].deliveryDash !== 'undefined'? that.translations[that.language].deliveryDash : ' - ';\r\n                        var afterEndDeliveryTime = typeof that.translations[that.language].afterEndDeliveryTime !== 'undefined'? that.translations[that.language].afterEndDeliveryTime : '';\r\n                        var betweenText = typeof that.translations[that.language].between !== 'undefined'?\r\n                            that.translations[that.language].between.replace(/a/g, '!a')\r\n                                .replace(/h/g, '!h')\r\n                                .replace(/H/g, '!H')\r\n                                .replace(/A/g, '!A')\r\n                                .replace(/i/g, '!i')\r\n                                .replace(/I/g, '!I') : 'Between';\r\n\r\n                        if (deliveryTimeFormat === 'HH:i') {\r\n                            // 24h format\r\n                            timeIntervalText = betweenText + ' ' + deliveryTimeFormat + dash + slots[i].endTime + afterEndDeliveryTime;\r\n                        } else {\r\n                            // am/pm format\r\n                            timeIntervalText = betweenText + ' ' + deliveryTimeFormat + ' - ' + that.tConvert(slots[i].endTime);\r\n                        }\r\n\r\n                        //return  'Between H:i A' + ' - ' + that.tConvert(slots[i].endTime);\r\n                        return timeIntervalText;\r\n                    }\r\n\r\n                }\r\n            },\r\n\r\n            onSet: function(item) {\r\n                console.log(item);\r\n\r\n                if ( 'select' in item ) setTimeout( function() {\r\n                    var selectedTime = jqCR('[data-pick=\"' + item.select + '\"]').html();\r\n                    var startTime = jqCR('[data-pick=\"' + item.select + '\"]').attr('aria-label')\r\n                    jqCR('#note-delivery-start-time').val(startTime)\r\n                    if (selectedTime) {\r\n                        selectedTime = selectedTime.replace('Between ', '');\r\n                    }\r\n\r\n                    jqCR('#note-delivery-time').val('');\r\n                    jqCR('#note-delivery-time').val(selectedTime)\r\n\r\n                    var selectedDate = picker.get();\r\n                    var selectedDateTime = selectedDate + ' - ' + selectedTime ;\r\n\r\n                    // Display the date and time on the frontend\r\n                    jqCR('#delivery-date-start').val('');\r\n                    jqCR('#delivery-date-start').val(selectedDateTime)\r\n\r\n\r\n                }, 0 )\r\n            },\r\n            onClose: function() {\r\n\r\n                if(timepicker.get() == ''){\r\n                    jqCR('#delivery-date-start').val('');\r\n                } else {\r\n                    jqCR('#delivery-date-start-error').css('display', 'none');\r\n                }\r\n            },\r\n        }).pickatime('picker');\r\n\r\n        var blackoutdatesCollection = that.getBlackoutDeliveryDays();\r\n\r\n        // Blackout days\r\n        if (picker !== undefined && picker !== null) {\r\n            that.disableDeliveryDays(blackoutdatesCollection);\r\n        }\r\n    },\r\n\r\n    tConvert: function  (time) {\r\n        // Check correct time format and split into components\r\n        time = time.toString ().match (/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\r\n\r\n        if (time.length > 1) { // If time format correct\r\n            time = time.slice (1);  // Remove full string match value\r\n            time[5] = +time[0] < 12 ? ' !A!M' : ' !P!M'; // Set AM/PM\r\n            time[0] = +time[0] % 12 || 12; // Adjust hours\r\n        }\r\n        return time.join (''); // return adjusted time or original string\r\n    },\r\n\r\n    getDisabledDaysArray: function(){\r\n        const that = this;\r\n        let deliveryDays = crDeliverySettings.deliveryDays || [];\r\n        let disableDays = [1, 2, 3, 4, 5, 6, 7];\r\n        // Disable only days that are not enabled\r\n        deliveryDays.map(item => {\r\n            // if(pickupLocale === 'fr' || pickupLocale === 'it' || pickupLocale === 'de' || pickupLocale === 'da'\r\n            //     || pickupLocale === 'pt-PT' || pickupLocale === 'pt-BR' || pickupLocale === 'pt' || pickupLocale === 'nl'\r\n            //     || pickupLocale === 'nb'\r\n            // ){\r\n            //     item = item == 1? 7 : Number(item) - 1\r\n            // }\r\n            disableDays = that.arrayRemove(disableDays, item);\r\n        });\r\n\r\n        return disableDays;\r\n    },\r\n\r\n    disableDeliveryDays: function(blackoutdatesCollection) {\r\n        storePickup.deliveryDatePicker.set('enable', true);\r\n\r\n        // Global Blackout Dates\r\n        let blackoutdates = [];\r\n        if (typeof crDeliverySettings.deliveryBlackoutDays !== 'undefined') {\r\n            blackoutdates = crDeliverySettings.deliveryBlackoutDays.split('-')\r\n        }\r\n\r\n        for (let i in blackoutdates) {\r\n            if(typeof blackoutdates[i] === 'function') continue;\r\n            if (!blackoutdates[i]) continue;\r\n            let chunks = (blackoutdates[i] + '').split(',');\r\n            blackoutdatesCollection.push(chunks);\r\n        }\r\n\r\n        // Callback used for customizations\r\n        if (typeof crDeliveryDateCallback === \"function\") {\r\n            crDeliveryDateCallback(storePickup.deliveryDatePicker, blackoutdatesCollection);\r\n        } else {\r\n            storePickup.deliveryDatePicker.set('disable', blackoutdatesCollection);\r\n        }\r\n    },\r\n\r\n    shortDays: function (dt){\r\n        Date.shortDays = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\r\n        return Date.shortDays[dt.getDay()];\r\n    },\r\n\r\n    formatDeliveryTimes: function(times){\r\n        //console.log('--\x3e', times)\r\n        var formattedTimes = [];\r\n\r\n        for (var i in times) {\r\n            //console.log(times[i].startTime, times[i].endTime);\r\n            if(typeof times[i] === \"function\") continue;\r\n            var chunks = times[i].startTime.split(':');\r\n            var startHours = Number(chunks[0]);\r\n            var startMinutes = Number(chunks[1]);\r\n\r\n            formattedTimes.push([startHours, startMinutes, 'inverted']);\r\n        }\r\n\r\n        formattedTimes.push({\r\n            from: [0, 0], to: [23, 45]\r\n        })\r\n\r\n\r\n        return formattedTimes;\r\n    },\r\n\r\n    setDatePicker: function(){\r\n        var that = this;\r\n        var settings = storePickupSettings;\r\n        var yesterday = new Date((new Date()).valueOf() - 1000 * 60 * 60 * 36);\r\n        var maxDays = settings.max_days && settings.max_days != 0? new Date((new Date()).valueOf() + 1000 * 60 * 60 * settings.max_days * 24) : '';\r\n        var minDays = settings.min_days && settings.min_days != 0? new Date((new Date()).valueOf() + 1000 * 60 * 60 * settings.min_days * 24) : new Date();\r\n\r\n        if (settings.max_days && settings.max_days === \"1\" && settings.min_days === \"0\") {\r\n            maxDays = new Date((new Date()).valueOf());\r\n        }\r\n\r\n        var todayPickup = settings.same_day_pickup? yesterday : new Date(); // blackout today if same day pickup is not set\r\n\r\n        //\r\n        var today = new Date();\r\n        var day = today.getDate()\r\n        var month = today.getMonth()\r\n        var year = today.getFullYear();\r\n        var hour = today.getHours();\r\n        var minutes = today.getMinutes();\r\n\r\n        //var limit = '01:55'; //stored in the database normaly, this is just for testing\r\n        if (stores.length === 1) {\r\n            that.selectedStoreId = stores[0].storeID;\r\n        }\r\n        var selectedStore = that.storeIds[that.selectedStoreId];\r\n        var preparationHours = 0;\r\n        var preparationMinutes = 0;\r\n\r\n        if (selectedStore && selectedStore.disableSameDayPickup &&  selectedStore.disableSameDayAfterHour){\r\n            var limit = selectedStore.disableSameDayAfterHour;\r\n            // console.log(\"Limit\", limit);\r\n            var chunks = limit.split(':');\r\n            var limitHours = chunks[0];\r\n            var limitMinutes = chunks[1];\r\n            if ((hour > limitHours) ||\r\n                (limitHours == hour &&  minutes >= limitMinutes)\r\n            ) {\r\n                todayPickup = new Date();\r\n            }\r\n        }\r\n\r\n        // Disable same day pickup if current time is over max hours\r\n        if (selectedStore && typeof selectedStore.daysOfWeek !== \"undefined\" && typeof selectedStore.daysOfWeek[today.getDay()] !== \"undefined\") {\r\n            preparationHours = Number(selectedStore.orderPreparationHours) || 0;\r\n            preparationMinutes = Number(selectedStore.orderPreparationMinutes) || 0;\r\n            var maxHour = Number(selectedStore.daysOfWeek[today.getDay()].max.hour);\r\n            var maxMinutes = Number(selectedStore.daysOfWeek[today.getDay()].max.minute);\r\n            //console.log(hour + preparationHours, maxHour);\r\n            if (((hour + preparationHours) > maxHour) || ( ((hour + preparationHours) === maxHour) && ((minutes + preparationMinutes) > maxMinutes))) {\r\n                todayPickup = new Date();\r\n            }\r\n        }\r\n\r\n        var dateFormat = typeof crRequestedDateFormat === \"undefined\"? 'mmmm d, yyyy' : crRequestedDateFormat;\r\n        var $input = jqCR('.datepicker').pickadate({\r\n            today: '',\r\n            clear: '',\r\n            format: dateFormat,\r\n            close: '',\r\n            min: minDays,\r\n            max:  maxDays,\r\n            onSet: function(item) {\r\n                //console.log(item);\r\n                if (item.select){\r\n                    //console.log(item.indexOf('select'))\r\n                    // console.log('start time')\r\n                    if ('select' in item) {\r\n                        // Check if same day was selected\r\n                        var ts = item.select;\r\n                        var today = new Date().setHours(0, 0, 0, 0);\r\n                        var thatDay = new Date(ts).setHours(0, 0, 0, 0);\r\n                        var isSameDay = today === thatDay;\r\n\r\n                        var selectedDate = new Date(item.select);\r\n                        var selectedMonth = Number(selectedDate.getMonth()) + 1\r\n                        var selectedDay = Number(selectedDate.getDate())\r\n                        var selectedYear = Number(selectedDate.getFullYear())\r\n\r\n                        //var formattedDate = ((selectedDate.getMonth() > 8) ? (selectedDate.getMonth() + 1) : ('0' + (selectedDate.getMonth() + 1))) + '/' + ((selectedDate.getDate() > 9) ? selectedDate.getDate() : ('0' + selectedDate.getDate())) + '/' + selectedDate.getFullYear()\r\n                        //var formattedDate = selectedDate.toLocaleDateString('en-US');\r\n                        var formattedDate = selectedMonth + '/' + selectedDay + '/' + selectedYear;\r\n                        that.formattedDate = formattedDate;\r\n\r\n                        //var pickedupDate = selectedDate.getDate();\r\n                        selectedMonth = selectedDate.getMonth();\r\n\r\n                        selectedDay = selectedDate.getDay();\r\n                        if (isNaN(selectedDay)) {\r\n                            selectedDay = item.select.day;\r\n                        }\r\n                        if (stores.length === 1) {\r\n                            that.selectedStoreId = stores[0].storeID;\r\n                        }\r\n                        that.updateStorePickupInformation()\r\n\r\n                        var selectedStore = that.storeIds[that.selectedStoreId];\r\n                        if (!selectedStore || !selectedStore.daysOfWeek || !selectedStore.enablePickupTime){\r\n                            jqCR('#pickup-time').val('');\r\n                            jqCR('#note-pickup-time').val('')\r\n                            return true;\r\n                        }\r\n\r\n                        // These two variables are calculated each time a date is selected, so don't move them from ehere\r\n                        var currentHour = new Date().getHours()\r\n                        var currentMinute = new Date().getMinutes();\r\n\r\n                        var timeSlotFrequency = selectedStore && selectedStore.timeSlotFrequency? Number(selectedStore.timeSlotFrequency) : 30;\r\n\r\n                        var minHour = selectedStore.daysOfWeek[selectedDay].min.hour;\r\n                        var minMinute = selectedStore.daysOfWeek[selectedDay].min.minute;\r\n\r\n                        // Preparation times\r\n                        preparationHours = Number(selectedStore.orderPreparationHours) || 0;\r\n                        preparationMinutes = Number(selectedStore.orderPreparationMinutes) || 0;\r\n\r\n                        if (isSameDay && currentHour >= (minHour - preparationHours)) {\r\n                            minHour = currentHour + preparationHours;\r\n\r\n                            // Round minutes\r\n                            var minuteDiff = 0;//currentMinute < 30? 30 - currentMinute : 60 - currentMinute;\r\n                            switch (timeSlotFrequency) {\r\n                                case 5:\r\n                                case 10:\r\n                                    if (currentMinute <= 10) minuteDiff = 10 - currentMinute\r\n                                    else if (currentMinute <= 20) minuteDiff = 20 - currentMinute\r\n                                    else if (currentMinute <= 30) minuteDiff = 30 - currentMinute\r\n                                    else if (currentMinute <= 40) minuteDiff = 40 - currentMinute\r\n                                    else if (currentMinute <= 50) minuteDiff = 50 - currentMinute\r\n                                    else if (currentMinute <= 60) minuteDiff = 60 - currentMinute\r\n\r\n                                    break;\r\n                                case 15:\r\n                                    if (currentMinute <= 15) minuteDiff = 15 - currentMinute\r\n                                    else if (currentMinute <= 30) minuteDiff = 30 - currentMinute\r\n                                    else if (currentMinute <= 45) minuteDiff = 45 - currentMinute\r\n                                    else if (currentMinute <= 60) minuteDiff = 60 - currentMinute\r\n\r\n                                    break;\r\n\r\n                                default:\r\n                                    minuteDiff = currentMinute < 30? 30 - currentMinute : 60 - currentMinute;\r\n                            }\r\n\r\n                            minMinute = currentMinute + minuteDiff + preparationMinutes;\r\n                        }\r\n\r\n                        var maxHour = selectedStore.daysOfWeek[selectedDay].max.hour;\r\n                        var maxMinute = selectedStore.daysOfWeek[selectedDay].max.minute;\r\n\r\n                        if (timepicker) {\r\n                            if (typeof crAfterDateSelectedCallback === \"function\") {\r\n                                crAfterDateSelectedCallback(selectedStore, selectedDay, selectedDate, selectedMonth);\r\n\r\n                            }\r\n                            timepicker.clear(); // clear previous values if it was set\r\n                            timepicker.set('min', [minHour, minMinute]);\r\n                            timepicker.set('max', [maxHour, maxMinute]);\r\n                            timepicker.set('interval', timeSlotFrequency);\r\n                            if (typeof window.maxOrdersPerTimeSlot === 'undefined') {\r\n                                window.maxOrdersPerTimeSlot = selectedStore.maxOrdersPerTimeSlot;\r\n                            }\r\n\r\n                            jqCR('.picker__list').append('<div class=\"loading-times\">loading</div>')\r\n                            jqCR.ajax({\r\n                                type: \"POST\",\r\n                                url: \"https://api1.thecreativer.com/orders/getSchedule\",\r\n                                data: {\r\n                                    selectedDate: that.formattedDate,//picker.get(),\r\n                                    selectedStoreId: selectedStore.storeID,\r\n                                    //storeName: selectedStore.name + ' - ' + selectedStore.city,\r\n                                    shopifyUrl: CRpermanentDomain,\r\n                                    maxOrders: window.maxOrdersPerTimeSlot\r\n                                },\r\n                                success: function(response) {\r\n                                    timepicker.set('enable', true);\r\n                                    // Enable time picker display\r\n                                    jqCR('.picker-list').css('display', 'block')\r\n\r\n                                    if (typeof CRdisabledTimes !== \"undefined\") {\r\n                                        for (let i = 0; i < CRdisabledTimes.length; i++) {\r\n                                            const disabledTimeStoreId = CRdisabledTimes[i].storeId;\r\n                                            const selectedStoreId = selectedStore.storeID;\r\n                                            // Check the disabled time slots are assigned to the selected store\r\n                                            if (disabledTimeStoreId && disabledTimeStoreId != selectedStoreId) continue;\r\n\r\n                                            const date = CRdisabledTimes[i].date;\r\n                                            const from = CRdisabledTimes[i].from;\r\n                                            const to = CRdisabledTimes[i].to;\r\n                                            const fromChunks = from.split(':');\r\n                                            const toChunks = to.split(':');\r\n\r\n                                            // If the times are disabled just for a specific day\r\n                                            if (date) {\r\n                                                const month = selectedDate.getMonth() + 1;\r\n                                                const day = selectedDate.getDate();\r\n                                                const year = selectedDate.getFullYear();\r\n                                                const selectedDateFormatted = `${month}/${day}/${year}`;\r\n\r\n                                                if (selectedDateFormatted === date) {\r\n                                                    timepicker.set('disable', [{ from: [fromChunks[0], fromChunks[1]], to: [toChunks[0], toChunks[1]] }]);\r\n                                                }\r\n                                            } else {\r\n                                                timepicker.set('disable', [{ from: [fromChunks[0], fromChunks[1]], to: [toChunks[0], toChunks[1]] }]);\r\n                                            }\r\n\r\n                                        }\r\n                                    }\r\n\r\n                                    if (typeof CRoverRidingRules !== \"undefined\") {\r\n                                        const overridingRules = that.overridingRules;\r\n\r\n                                        overridingRules.forEach((overridingRule, index) => {\r\n                                            const disabledTimes = overridingRule.disabledTimes;\r\n                                            const enabledDates = overridingRule.enabledDates;\r\n                                            enabledDates.forEach((enabledDay) => {\r\n                                                if (enabledDay[0] === selectedYear && enabledDay[1] === selectedMonth && enabledDay[2] === Number(selectedDate.getDate()) ) {\r\n                                                    disabledTimes.forEach((disabledTime) => {\r\n                                                        const from = disabledTime.from;\r\n                                                        const to = disabledTime.to;\r\n                                                        const fromChunks = from.split(':');\r\n                                                        const toChunks = to.split(':');\r\n                                                        timepicker.set('disable', [{ from: [fromChunks[0], fromChunks[1]], to: [toChunks[0], toChunks[1]] }]);\r\n                                                    })\r\n                                                }\r\n                                            })\r\n\r\n                                        })\r\n                                    }\r\n\r\n                                    if (typeof crPickupCallback === \"function\") {\r\n                                        crPickupCallback(timepicker, selectedStore, selectedDay, selectedDate, selectedMonth);\r\n                                    }\r\n                                    timepicker.set('disable',\r\n                                        response\r\n                                    );\r\n                                },\r\n                                error: function(err) {\r\n                                    console.log(err);\r\n\r\n                                    // Don't block the time selection even if the request fails\r\n                                    timepicker.set('enable', true);\r\n                                    // Enable time picker display\r\n                                    jqCR('.picker-list').css('display', 'block')\r\n                                }\r\n                            });\r\n\r\n                            setTimeout(timepicker.open, 0)\r\n                        }\r\n                    }\r\n\r\n                }\r\n            },\r\n            onClose: function() {\r\n                if(typeof storePickup.datePicker.get() !== 'undefined' && storePickup.datePicker.get() === ''){\r\n                    // jqCR('#pickup-date-start').val('')\r\n                } else {\r\n                    console.log('hide')\r\n                    jqCR('#pickup-date-start-error').css('display', 'none');\r\n                    jqCR('#pickup-date-start').removeClass('error')\r\n                }\r\n            },\r\n        });\r\n\r\n        var picker = $input.pickadate('picker');\r\n        storePickup.datePicker = picker;\r\n        // Set time cut off\r\n        if (selectedStore && selectedStore.allowTimeCutOff && selectedStore.cutOffMinPickupDays) {\r\n            var limit = selectedStore.cutOffStartTime;\r\n            var chunks = limit.split(':');\r\n            var limitHours = chunks[0];\r\n            var limitMinutes = chunks[1];\r\n            if ((hour > limitHours) ||\r\n                (limitHours == hour &&  minutes >= limitMinutes)\r\n            ) {\r\n\r\n                minDays = Number(selectedStore.cutOffMinPickupDays);\r\n\r\n                if (picker !== undefined && picker !== null) {\r\n                    picker.set('enable', true)\r\n                    picker.set('min', minDays);\r\n                }\r\n            }\r\n        } else {\r\n            // Reset min days, otherwise min days will be stored from the last locations selected\r\n            if (picker) {\r\n                picker.set('enable', true)\r\n                picker.set('min', minDays);\r\n            }\r\n        }\r\n\r\n        // end time cut off\r\n        var timeFormat = 'h:i A';\r\n        if(pickupLocale === 'fr' || pickupLocale === 'it' || pickupLocale === 'de' || pickupLocale === 'da'\r\n            || pickupLocale === 'pt-PT' || pickupLocale === 'pt-BR' || pickupLocale === 'pt' || pickupLocale === 'nl'\r\n            || pickupLocale === 'nb'\r\n        ) {\r\n            timeFormat ='HH:i';\r\n        }\r\n        if(typeof crRequestedTimeFormat !== \"undefined\"){\r\n            timeFormat = crRequestedTimeFormat;\r\n        }\r\n\r\n        // Time\r\n        var timepicker = jqCR('#pickup-time').pickatime({\r\n            clear: '',\r\n            interval: 15,\r\n            format: timeFormat,\r\n            onSet: function(item) {\r\n                //console.log(item);\r\n\r\n                if ( 'select' in item ) setTimeout( function() {\r\n                    var selectedTime = timepicker.get();\r\n                    jqCR('#pickup-time').val('');\r\n                    jqCR('#pickup-time').val(selectedTime)\r\n\r\n                    var dateToBeConverted = that.formattedDate + ' ' + timepicker.get();\r\n                    dateToBeConverted = dateToBeConverted.replace(/[^a-zA-Z0-9\\/ :]/g,'');\r\n                    that.formattedDateTime = dateToBeConverted;\r\n                    var unixTimestamp = new Date(dateToBeConverted).getTime() / 1000;\r\n                    that.unixTimestamp = unixTimestamp;\r\n\r\n                    that.updateStorePickupInformation()\r\n\r\n                    var selectedDateTime = picker.get() + ' @ ' + timepicker.get();\r\n\r\n                    jqCR('#pickup-date-start').val('')\r\n                    jqCR('#pickup-date-start').val(selectedDateTime)\r\n\r\n                    if (typeof CRtimeSelectedCallback !== 'undefined') {\r\n                        CRtimeSelectedCallback(picker.get(), timepicker.get())\r\n                    }\r\n                }, 0 )\r\n            },\r\n            onClose: function() {\r\n                if(timepicker.get() == ''){\r\n                    jqCR('#pickup-date-start').val('')\r\n                } else {\r\n                    jqCR('#pickup-date-start-error').css('display', 'none');\r\n                }\r\n                console.log('Closed now')\r\n            },\r\n        }).pickatime('picker');\r\n\r\n        let blackoutdatesCollection = [];\r\n        blackoutdatesCollection.push(todayPickup)\r\n        // Blackout dates\r\n        if (picker !== undefined && picker !== null && settings.blackoutDates) {\r\n            // Global Blackout Dates\r\n            let blackoutdates = settings.blackoutDates.split('-')\r\n\r\n            for (let i in blackoutdates) {\r\n                if(typeof blackoutdates[i] === 'function') continue;\r\n                let chunks = (blackoutdates[i] + '').split(',');\r\n                blackoutdatesCollection.push(chunks);\r\n            }\r\n        }\r\n\r\n        // Store Blackout Dates\r\n        if (stores.length === 1) {\r\n            that.selectedStoreId = stores[0].storeID;\r\n        }\r\n\r\n        if (that.selectedStoreId != null && that.storeIds[that.selectedStoreId]){\r\n            let disableDays = [];\r\n            let pickupDays = that.storeIds[that.selectedStoreId].pickupDays\r\n\r\n            // Disable specific days\r\n            if (typeof pickupDays !== 'undefined' && pickupDays !== null && pickupDays.length) {\r\n                disableDays = [1, 2, 3, 4, 5, 6, 7];\r\n                // Disable only days that are not enabled\r\n                pickupDays.map(item => {\r\n                    // if(pickupLocale === 'fr' || pickupLocale === 'it' || pickupLocale === 'de' || pickupLocale === 'da'\r\n                    //     || pickupLocale === 'pt-PT' || pickupLocale === 'pt-BR' || pickupLocale === 'pt' || pickupLocale === 'nl'\r\n                    //     || pickupLocale === 'nb'\r\n                    // ){\r\n                    //     item = item == 1? 7 : Number(item) - 1\r\n                    // }\r\n                    disableDays = that.arrayRemove(disableDays, item);\r\n                });\r\n                disableDays.map(item => {\r\n                    blackoutdatesCollection.push(item)\r\n                });\r\n            }\r\n        }\r\n\r\n        if (that.selectedStoreId != null && that.storeIds[that.selectedStoreId].blackoutDates) {\r\n            let storeBlackoutDates = that.storeIds[that.selectedStoreId].blackoutDates.split('-');\r\n\r\n            for (let i in storeBlackoutDates) {\r\n                if(typeof  storeBlackoutDates[i]=== 'function') continue;\r\n                const chunks = (storeBlackoutDates[i] + '').split(',');\r\n                blackoutdatesCollection.push(chunks);\r\n            }\r\n        }\r\n\r\n        if (picker !== undefined && picker !== null) {\r\n            picker.set('enable', true);\r\n\r\n            if (typeof selectedStore !== \"undefined\" && selectedStore.maxOrdersPerDay) {\r\n                jqCR('.picker__frame').append('<div class=\"loading-times\">Loading...</div>')\r\n                jqCR.ajax({\r\n                    type: \"POST\",\r\n                    url: \"https://api1.thecreativer.com/orders/maxOrdersPerDay\",\r\n                    data: {\r\n                        shopifyUrl: CRpermanentDomain,\r\n                        maxOrdersPerDay: selectedStore.maxOrdersPerDay,\r\n                        storeId: selectedStore.storeID\r\n                    },\r\n                    success: function (response) {\r\n                        //@todo add loader on the calendar\r\n                        jqCR('.loading-times').remove()\r\n                        const disabledDates = response.disabledDates;\r\n                        for (const i in disabledDates) {\r\n                            const foundDate = i;\r\n                            const chunks = foundDate.split('/');\r\n                            const disabledMonth = chunks[0] - 1;\r\n                            const disabledDay = chunks[1];\r\n                            const disabledYear = chunks[2];\r\n                            blackoutdatesCollection.push([disabledYear, disabledMonth, disabledDay])\r\n                        }\r\n\r\n                        that.setBlackoutDates(picker, selectedStore, blackoutdatesCollection, disabledDates);\r\n                    },\r\n                    error: function (err) {\r\n                        console.log(err);\r\n\r\n                    }\r\n                })\r\n            } else {\r\n                that.setBlackoutDates(picker, selectedStore, blackoutdatesCollection);\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    setBlackoutDates: function(picker, selectedStore, blackoutdatesCollection, disabledDates){\r\n        const that = this;\r\n        if (typeof crDateCallback === \"function\") {\r\n            crDateCallback(picker, selectedStore, blackoutdatesCollection);\r\n        } else {\r\n            // check if CRoverridingProducts is defined\r\n            var overridingProducts = false;\r\n            if (that.overridingRules.length) {\r\n                that.overridingRules.forEach((overridingRule, index) => {\r\n                    overridingProducts  = true;\r\n                    var today = new Date();\r\n                    var currentMonth = today.getMonth();\r\n                    var currentDay = today.getDate();\r\n                    var currentYear = today.getFullYear()\r\n                    overridingRule.enabledDates.forEach((enabledDay, index) => {\r\n                        if (typeof disabledDates !== 'undefined' && !jqCR.isEmptyObject(disabledDates)) {\r\n                            for (const i in disabledDates) {\r\n                                const foundDate = i;\r\n                                const chunks = foundDate.split('/');\r\n                                const disabledMonth = Number(chunks[0]) - 1;\r\n                                const disabledDay = Number(chunks[1]);\r\n                                const disabledYear = Number(chunks[2]);\r\n                                if (enabledDay[0] === disabledYear && enabledDay[1] === disabledMonth && enabledDay[2] === disabledDay\r\n                                ) {\r\n                                    //console.log('Number of orders limit per day has been reached')\r\n                                } else if (enabledDay[0] >= currentYear && enabledDay[1] >= currentMonth && enabledDay[2] >= currentDay) {\r\n                                    picker.set('disable', [enabledDay])\r\n                                }\r\n                            }\r\n                        } else if (\r\n                            (enabledDay[0] > currentYear) ||\r\n                            (enabledDay[0] == currentYear && enabledDay[1] > currentMonth) ||\r\n                            (enabledDay[0] == currentYear && enabledDay[1] == currentMonth && enabledDay[2] >= currentDay)\r\n                        ) {\r\n                            const foundDate = new Date(enabledDay[0], enabledDay[1], enabledDay[2]);\r\n                            const diff = foundDate.getTime() - today.getTime();\r\n                            const totalDiffDays = Math.ceil(diff / (1000 * 3600 * 24));\r\n\r\n                            // Keep minimum pickup days set within the app settings\r\n                            if (typeof storePickupSettings.min_days !== 'undefined' && totalDiffDays < storePickupSettings.min_days) return;\r\n\r\n                            picker.set('disable', [enabledDay])\r\n                        }\r\n\r\n                    })\r\n                    picker.set('min', -1)\r\n                })\r\n            }\r\n\r\n            // Apply the general rules only if there are no overriding products\r\n            if (!overridingProducts) {\r\n                picker.set('disable', blackoutdatesCollection);\r\n            } else {\r\n                picker.set('disable', 'flip')\r\n            }\r\n        }\r\n\r\n        picker.on({\r\n            set: function(thingSet) {\r\n                //console.log('Set stuff:', thingSet)\r\n                //that.updateStorePickupInformation()\r\n            },\r\n\r\n            close: function(){\r\n                // Fix scroll issue\r\n                var drawerInner = document.querySelector('.drawer--has-fixed-footer .drawer__inner')\r\n                if (drawerInner) {\r\n                    var initScroll = drawerInner.scrollTop;\r\n                    document.querySelector('.drawer--has-fixed-footer .drawer__inner').scrollTop = initScroll - 15;\r\n                }\r\n\r\n            }\r\n        })\r\n    },\r\n\r\n    arrayRemove: function (arr, value) {\r\n        if(pickupLocale === 'fr' || pickupLocale === 'it' || pickupLocale === 'de' || pickupLocale === 'da'\r\n            || pickupLocale === 'pt-PT' || pickupLocale === 'pt-BR' || pickupLocale === 'pt' || pickupLocale === 'nl'\r\n            || pickupLocale === 'nb'\r\n        ){\r\n            value = value == 1? 7 : Number(value) - 1\r\n        }\r\n        return arr.filter(function(ele){\r\n            return ele != value;\r\n        });\r\n    },\r\n    displayStores: function(){\r\n        var that = this;\r\n        var settings = this.settings();\r\n        if (stores === undefined) return;\r\n        if (stores === '') return;\r\n\r\n        //if (typeof stores === \"object\") return;\r\n        if (stores !== Object(stores)) {\r\n            stores = JSON.parse(stores);\r\n        }\r\n\r\n        // if not at least 2 stores don't display this field\r\n        if (stores.length < 2) return;\r\n\r\n        // Set position where stores will be displayed\r\n        console.log('stores')\r\n        var storesTemplate = '';\r\n        var text = '';\r\n        if (settings.locationsInASelect){\r\n            storesTemplate = this.storesTemplateSelect();\r\n        } else {\r\n            storesTemplate = this.storesTemplate();\r\n        }\r\n\r\n        if (settings.stores_on_top) {\r\n            jqCR('.js-stores-position-1').html(storesTemplate);\r\n        } else {\r\n            jqCR('.js-stores-position-2').html(storesTemplate);\r\n        }\r\n\r\n        jqCR('.pickup-store-search').prop('required', true);\r\n        // Special display for a specific store\r\n        var extra = false;\r\n        var CRpermanentDomain = CRpermanentDomain || '';\r\n        if (CRpermanentDomain && CRpermanentDomain.indexOf('reddaway.myshopify.com') > -1) {\r\n            extra = true;\r\n        }\r\n\r\n        var ul = document.getElementById(\"storeUL\");\r\n        if (settings.locationsInASelect){\r\n            var chooseLocationText = that.translations[that.language].chooseLocationOption || defaultPickupTranslation.en.chooseLocationOption;\r\n            text = '<option>' + chooseLocationText + '</option>';\r\n            jqCR(ul).append(text);\r\n        }\r\n\r\n        for (var n in stores) {\r\n            if (stores[n].storeID === undefined) continue;\r\n            that.storeIds[stores[n].storeID] = stores[n];\r\n            var displayStore = stores[n].name + ' - ' + stores[n].city;\r\n\r\n            if (extra === true) {\r\n                displayStore = displayStore + ' - ' + stores[n].province;\r\n            }\r\n\r\n            if (settings.locationsInASelect) {\r\n                text = '<option value=\"' + stores[n].storeID + '\" id= ' + stores[n].storeID + ' class=\"searchTerm\"' +\r\n                    'data-zip-code=\"' + stores[n].zip + '\" '\r\n                    + 'data-address=\"' + stores[n].street + '\"'\r\n                    + 'data-name=\"' + stores[n].name + '\"'\r\n                    + 'data-city=\"' + stores[n].city + '\"'\r\n                    + 'data-country=\"' + stores[n].country + '\"'\r\n                    + 'data-province=\"' + stores[n].province + '\"'\r\n                    + 'data-store-id=\"' + stores[n].storeID + '\"'\r\n                    + 'data-company=\"' + stores[n].company + '\"' +'>' +\r\n                    displayStore + ' ' + stores[n].street + '' +\r\n                    '</option>';\r\n            } else {\r\n                if (stores[n].allowDisplayMoreInformation) {\r\n                    text = '<li id= ' + stores[n].storeID + ' class=\"searchTerm\">' +\r\n                        '<a href=\"#\" ' +\r\n                        'data-zip-code=\"' + stores[n].zip + '\" '\r\n                        + 'data-address=\"' + stores[n].street + '\"'\r\n                        + 'data-name=\"' + stores[n].name + '\"'\r\n                        + 'data-city=\"' + stores[n].city + '\"'\r\n                        + 'data-country=\"' + stores[n].country + '\"'\r\n                        + 'data-province=\"' + stores[n].province + '\"'\r\n                        + 'data-store-id=\"' + stores[n].storeID + '\"'\r\n                        + 'data-company=\"' + stores[n].company + '\"'\r\n                        + '\" style=\"display: flex\">'\r\n                        + '<div class=\"cr-radio-wrapper\">'\r\n                        + '<input class=\"cr-radio\" name=\"locationId\" type=\"radio\" value=\"' + stores[n].storeID + '\">'\r\n                        + '</div>'\r\n\r\n                        + '<div>'\r\n                        + '<div class=\"cr-store-title\"><strong>' + displayStore + '</strong></div>' +\r\n                        '<div class=\"cr-store-details\">' +\r\n                        '<div class=\"cr-store-address\"><span>' + stores[n].street + '</span><br>' +\r\n                        '<span>' + stores[n].city + ', ' + stores[n].province + ' ' + stores[n].zip + '</span></div>' +\r\n                        '<div class=\"cr-more-details\">' + stores[n].moreInformation + '</div>'+\r\n                        '</div>' +\r\n                        '</div>' +\r\n                        '</a>' +\r\n                        '</li>';\r\n                } else if(true){\r\n                    // Stores list with a radio input\r\n                    text = '<li id= ' + stores[n].storeID + ' class=\"searchTerm\">' +\r\n                        '<a href=\"#\" ' +\r\n                        'data-zip-code=\"' + stores[n].zip + '\" '\r\n                        + 'data-address=\"' + stores[n].street + '\"'\r\n                        + 'data-name=\"' + stores[n].name + '\"'\r\n                        + 'data-city=\"' + stores[n].city + '\"'\r\n                        + 'data-country=\"' + stores[n].country + '\"'\r\n                        + 'data-province=\"' + stores[n].province + '\"'\r\n                        + 'data-store-id=\"' + stores[n].storeID + '\"'\r\n                        + 'data-company=\"' + stores[n].company + '\"'\r\n                        + '\" style=\"display: flex\">'\r\n                        + '<div class=\"cr-radio-wrapper\">'\r\n                        + '<input class=\"cr-radio\" name=\"locationId\" type=\"radio\" value=\"' + stores[n].storeID + '\">'\r\n                        + '</div>'\r\n\r\n                        + '<div>'\r\n                        + '<strong>' + displayStore + '</strong><br>'\r\n                        + '<span>' + stores[n].street + '</span><br>'\r\n                        + '<span>' + stores[n].city + ', ' + stores[n].province + ' ' + stores[n].zip + '</span>' + '</div>'+ '</a>' + '</li>';\r\n                } else {}\r\n            }\r\n\r\n\r\n            jqCR(ul).append(text);\r\n        }\r\n        this.storeSearchEvent()\r\n    },\r\n\r\n    // Event triggered when locations are displayed in a \"select\"\r\n    onStoreChangeInSelect: function(that){\r\n        // Reset all values\r\n        jqCR('#storeUL option').removeClass('activeStore')\r\n        jqCR('#pickup-date-start').val('')\r\n        var selectedOption = jqCR('#storeUL option:selected');\r\n        var phone = jqCR('#pickup-number').val() || '';\r\n        var pickupStoreHtml = selectedOption.html();\r\n        var pickupStoreHtmlEscaped = '';\r\n        if (pickupStoreHtml != undefined) {\r\n            pickupStoreHtmlEscaped = pickupStoreHtml.replace(/\\&amp;/g, '&')\r\n        }\r\n        var zipCode = selectedOption.attr('data-zip-code');\r\n        var address = selectedOption.attr('data-address');\r\n        var chosenCity = selectedOption.attr('data-city');\r\n        var chosenProvince = selectedOption.attr('data-province');\r\n        var chosenCountry = selectedOption.attr('data-country');\r\n        var storeName = selectedOption.attr('data-name');\r\n        var companyName = selectedOption.attr('data-company');\r\n        that.selectedStoreId = selectedOption.attr('data-store-id');\r\n\r\n        that.setDatePicker()\r\n        //jqCR(\"#storeUL li\").removeClass('activeStore'); // Clear class from all li\r\n        jqCR('.js-chosen-store').remove();\r\n\r\n        jqCR('#pickup-store').val(pickupStoreHtml);\r\n        jqCR('#pickup-store-search').val(pickupStoreHtmlEscaped)\r\n\r\n        // This is needed for validation purposes\r\n        jqCR('#pickup-store-search').after(\r\n            '<span class=\"js-chosen-store\">' + storeName + '<br> ' +\r\n            'Address: ' + address + '<br>' +\r\n            'Zip: ' + zipCode\r\n            + '</span>'\r\n        )\r\n\r\n        if (typeof address !== 'undefined') {\r\n            address = address.replace(/\\#/, '');\r\n        }\r\n\r\n        //that.updateStorePickupInformation()\r\n        if (companyName === undefined) companyName = '';\r\n        selectedOption.addClass('activeStore');\r\n        //Update autofilling data for the checkout page\r\n        //var shippingInfo = \"step=contact_information&checkout[shipping_address][company]=\" + storeName.replace(/\\#/, '')\r\n        var shippingInfo = \"step=contact_information&checkout[shipping_address][company]=\" + companyName.replace(/\\#/, '').replace(\"'\", '%27')\r\n            + \"&checkout[shipping_address][phone]=\" + ''\r\n            + \"&checkout[shipping_address][address1]=\" + address.replace(/\\#/, '').replace(\"'\", '%27')\r\n            + \"&checkout[shipping_address][city]=\" + chosenCity\r\n            + \"&checkout[shipping_address][country]=\" + chosenCountry\r\n            + \"&checkout[shipping_address][zip]=\" + zipCode\r\n            + \"&checkout[shipping_address][province]=\" + chosenProvince\r\n            + \"&checkout[shipping_address][county]=\" + chosenProvince\r\n        ;\r\n\r\n        jqCR('#cr-checkout-shipping-company').val(companyName.replace(/\\#/, ''))\r\n        jqCR('#cr-checkout-shipping-address1').val(address)\r\n        jqCR('#cr-checkout-shipping-city').val(chosenCity)\r\n        jqCR('#cr-checkout-shipping-country').val(chosenCountry)\r\n        jqCR('#cr-checkout-shipping-zip').val(zipCode)\r\n        jqCR('#cr-checkout-shipping-province').val(chosenProvince)\r\n        jqCR('#cr-checkout-shipping-county').val(chosenProvince)\r\n\r\n\r\n        //@todo (remove duplication)\r\n        var firstName = jqCR('#pickup-first-name').val();\r\n        var lastName = jqCR('#pickup-last-name').val();\r\n        if (firstName) {\r\n            firstName = firstName.trim();\r\n            shippingInfo += \"&checkout[shipping_address][first_name]=\" + firstName + '&';\r\n            jqCR('#cr-checkout-shipping-first-name').val(firstName)\r\n        }\r\n        if (lastName) {\r\n            lastName = lastName.trim();\r\n            shippingInfo += \"&checkout[shipping_address][last_name]=\" + lastName + '&';\r\n            jqCR('#cr-checkout-shipping-last-name').val(lastName)\r\n        }\r\n        var pickupNumber = jqCR('#pickup-number').val()\r\n        if (pickupNumber != undefined && pickupNumber != '') {\r\n            shippingInfo += \"&checkout[shipping_address][phone]=\" + pickupNumber + '&';\r\n            jqCR('#cr-checkout-shipping-phone').val(pickupNumber)\r\n        }\r\n\r\n        var pickupEmail = jqCR('#pickup-email').val()\r\n        if (pickupEmail !== undefined && pickupEmail != '') {\r\n            shippingInfo += \"&checkout[email_or_phone]=\" + pickupEmail + '&';\r\n            jqCR('#cr-checkout-email_or_phone').val(pickupEmail)\r\n        }\r\n        //@endtodo\r\n\r\n        // This is kept for legacy, the option is not active anymore\r\n        if(that.settings().replaceCustomerName !== undefined && that.settings().replaceCustomerName === 'true') {\r\n            shippingInfo += \"&checkout[shipping_address][last_name]=\" + storeName.replace(/\\#/, '')\r\n        }\r\n\r\n        if (that.settings().discount !== undefined && that.settings().discount !== ''){\r\n            shippingInfo += \"&discount=\" + that.settings().discount\r\n        }\r\n\r\n        that.shippingInformation = shippingInfo;\r\n        that.updateFormActionWithShippingInformation();\r\n        that.updateStorePickupInformation()\r\n\r\n    },\r\n\r\n    storeSearchEvent: function(){\r\n        let that = this;\r\n        let settings = this.settings();\r\n        var phone = jqCR('#pickup-number').val() || '';\r\n        if (settings.locationsInASelect) {\r\n            jqCR(\"#storeUL\").on(\"change\", that.onStoreChangeInSelect.bind(this, that));\r\n        } else {\r\n            jqCR(\"#storeUL\").on(\"click change\", \".searchTerm\", onStoreChange);\r\n        }\r\n\r\n        function onStoreChange(e) {\r\n            jqCR('#pickup-date-start').val('')\r\n            // Make class active\r\n            // If already selected, unselect\r\n            if (jqCR(this).attr('class').indexOf('activeStore') > -1) {\r\n                jqCR(this).removeClass('activeStore');\r\n                this.pickupStore = \"\";\r\n                jqCR('#pickup-store').val('');\r\n                jqCR('#pickup-store-search').val('')\r\n                jqCR('.js-chosen-store').remove();\r\n                that.selectedStoreId = null;\r\n                jqCR(this).find('.cr-radio').prop(\"checked\", false);\r\n            } else {\r\n                jqCR(this).find('.cr-radio').prop(\"checked\", true);\r\n                var pickupStoreHtml = jqCR(this).children('a')[0].innerHTML;\r\n                var pickupStoreHtmlEscaped = '';\r\n                if (pickupStoreHtml != undefined) {\r\n                    pickupStoreHtmlEscaped = pickupStoreHtml.replace(/\\&amp;/g, '&')\r\n                }\r\n                var zipCode = jqCR(this).children(\"a\")[0].getAttribute('data-zip-code');\r\n                var address = jqCR(this).children(\"a\")[0].getAttribute('data-address');\r\n                var chosenCity = jqCR(this).children(\"a\")[0].getAttribute('data-city');\r\n                var chosenProvince = jqCR(this).children(\"a\")[0].getAttribute('data-province');\r\n                var chosenCountry = jqCR(this).children(\"a\")[0].getAttribute('data-country');\r\n                var storeName = jqCR(this).children(\"a\")[0].getAttribute('data-name');\r\n                var companyName = jqCR(this).children(\"a\")[0].getAttribute('data-company');\r\n                that.selectedStoreId = jqCR(this).children(\"a\")[0].getAttribute('data-store-id');\r\n                that.setDatePicker()\r\n                jqCR(\"#storeUL li\").removeClass('activeStore'); // Clear class from all li\r\n                jqCR('.js-chosen-store').remove();\r\n                jqCR(this).addClass('activeStore');\r\n                jqCR('#pickup-store').val(pickupStoreHtml);\r\n                //jqCR('#pickup-store-search').val(pickupStoreHtmlEscaped)\r\n                jqCR('#pickup-store-search').val(storeName)\r\n                jqCR('#pickup-store-search').after(\r\n                    '<span class=\"js-chosen-store\">' + storeName + '<br> ' +\r\n                    'Address: ' + address + '<br>' +\r\n                    'Zip: ' + zipCode\r\n                    + '</span>'\r\n                )\r\n\r\n                that.updateStorePickupInformation()\r\n\r\n                //Update autofilling data for the checkout page\r\n                //var shippingInfo = \"step=contact_information&checkout[shipping_address][company]=\" + storeName.replace(/\\#/, '')\r\n                var shippingInfo = \"step=contact_information&checkout[shipping_address][company]=\" + companyName.replace(/\\#/, '').replace(\"'\", '%27')\r\n                    + \"&checkout[shipping_address][phone]=\" + phone\r\n                    + \"&checkout[shipping_address][address1]=\" + address.replace(/\\#/, '').replace(\"'\", '%27')\r\n                    + \"&checkout[shipping_address][city]=\" + chosenCity\r\n                    + \"&checkout[shipping_address][country]=\" + chosenCountry\r\n                    + \"&checkout[shipping_address][zip]=\" + zipCode\r\n                    + \"&checkout[shipping_address][province]=\" + chosenProvince\r\n                    + \"&checkout[shipping_address][county]=\" + chosenProvince\r\n                ;\r\n\r\n                jqCR('#cr-checkout-shipping-company').val(companyName.replace(/\\#/, ''))\r\n\r\n                jqCR('#cr-checkout-shipping-address1').val(address.replace(/\\#/, ''))\r\n                jqCR('#cr-checkout-shipping-city').val(chosenCity)\r\n                jqCR('#cr-checkout-shipping-country').val(chosenCountry)\r\n                jqCR('#cr-checkout-shipping-zip').val(zipCode)\r\n                jqCR('#cr-checkout-shipping-province').val(chosenProvince)\r\n                jqCR('#cr-checkout-shipping-county').val(chosenProvince)\r\n\r\n                //@todo (remove duplication)\r\n                var firstName = jqCR('#pickup-first-name').val();\r\n                var lastName = jqCR('#pickup-last-name').val();\r\n                if (firstName) {\r\n                    firstName = firstName.trim();\r\n                    shippingInfo += \"&checkout[shipping_address][first_name]=\" + firstName + '&';\r\n                    jqCR('#cr-checkout-shipping-first-name').val(firstName)\r\n                }\r\n                if (lastName) {\r\n                    lastName = lastName.trim();\r\n                    shippingInfo += \"&checkout[shipping_address][last_name]=\" + lastName + '&';\r\n                    jqCR('#cr-checkout-shipping-last-name').val(lastName)\r\n                }\r\n                var pickupNumber = jqCR('#pickup-number').val()\r\n                if (pickupNumber !== undefined && pickupNumber != '') {\r\n                    shippingInfo += \"&checkout[shipping_address][phone]=\" + pickupNumber + '&';\r\n                    jqCR('#cr-checkout-shipping-phone').val(pickupNumber)\r\n                }\r\n\r\n                var pickupEmail = jqCR('#pickup-email').val()\r\n                if (pickupEmail !== undefined && pickupEmail != '') {\r\n                    shippingInfo += \"&checkout[email_or_phone]=\" + pickupEmail + '&';\r\n                    jqCR('#cr-checkout-email_or_phone').val(pickupEmail)\r\n                }\r\n\r\n                //@endtodo\r\n\r\n                if(that.settings().replaceCustomerName !== undefined && that.settings().replaceCustomerName === 'true') {\r\n                    shippingInfo += \"&checkout[shipping_address][last_name]=\" + storeName.replace(/\\#/, '')\r\n                }\r\n\r\n                if (that.settings().discount !== undefined && that.settings().discount !== ''){\r\n                    shippingInfo += \"&discount=\" + that.settings().discount\r\n                }\r\n\r\n                that.shippingInformation = shippingInfo;\r\n                that.updateFormActionWithShippingInformation();\r\n            };\r\n\r\n            e.preventDefault();\r\n        }\r\n    },\r\n\r\n    // Set the url where the form will point (helps auto complete the checkout page form)\r\n    updateFormActionWithShippingInformation: function(){\r\n        var form = this.submitForm();\r\n        var localeChunks = pickupLocale.split('-');\r\n        if (typeof CRskipUpdateFormAction !== 'undefined' && CRskipUpdateFormAction === true) {\r\n            jqCR(form).attr('action', '/checkout?skip_shopify_pay=true' + '&locale=' + localeChunks[0] + '-pickup');\r\n        } else {\r\n            this.shippingInformation = this.shippingInformation.replace(/\\&+/g, '&');\r\n            jqCR(form).attr('action', '/checkout?' + this.shippingInformation + '&skip_shopify_pay=true' + '&locale=' + localeChunks[0] + '-pickup');\r\n        }\r\n    },\r\n\r\n    listenEvents: function(){\r\n        let that = this;\r\n        const body = jqCR('body');\r\n\r\n        var form = this.submitForm();\r\n        //var theme = theme || '';\r\n        if (typeof theme !== \"undefined\" && typeof theme.cache !== \"undefined\" && typeof theme.cache.$body !== \"undefined\") {\r\n            theme.cache.$body.on('ajaxCart.afterCartLoad', function(evt, cart) {\r\n                console.log('Cart reloaded')\r\n                if(cart.items.length) {\r\n                    that.getCartItems().then(function(response) {\r\n                        if (typeof CRcarrierServiceEnabled !== \"undefined\" && CRcarrierServiceEnabled === true) {\r\n                            that.addLineProperty(response, 'shipping')\r\n                        }\r\n                    })\r\n                }\r\n\r\n                console.log(jqCR('.pickup-button').hasClass('selected'))\r\n                if (!jqCR('.pickup-button').hasClass('selected')) {\r\n                    //that.activatePickupButton();\r\n                    //storePickup.excludeFromPickup() // not used at the moment\r\n                    that.changePickupButtonText();\r\n                    that.activatePickupButtonIfItemInCart(cart);\r\n                    that.setDatePicker();\r\n                    that.displayStores();\r\n                }\r\n            })\r\n        } else {\r\n            jqCR('body').on('click', '.ajaxcart__qty-adjust', function() {\r\n                console.log('cart updated')\r\n                setTimeout(function () {\r\n                    that.displayPickupAfterRedraw()\r\n                }, 1500)\r\n            });\r\n        }\r\n\r\n        jqCR(\".cr-icon-search\").on('click', function(e){\r\n            //form.submit();\r\n            var form = storePickup.submitForm();\r\n            var isFormValid = form.valid();\r\n\r\n            if (typeof crValidateDelivery !== 'undefined' && crValidateDelivery === true) {\r\n                if (!isFormValid) return;\r\n                // *** Start delivery submit handler *** //\r\n                const deliveryStyle = typeof crDeliverySettings.deliveryStyle !== 'undefined'? crDeliverySettings.deliveryStyle : 'general';\r\n                jqCR('.cart__checkout--page').removeClass('btn--loading');\r\n                jqCR('.cart__checkout').removeClass('btn--loading');\r\n                const selectedZip = jqCR('#cr-delivery-zip').val();\r\n\r\n                if(typeof crDeliverySettings !== \"undefined\" && crDeliverySettings.askForZip === true) {\r\n                    //storePickup.checkDeliveryConditions()\r\n                    if (deliveryStyle === 'byDay') {\r\n                        storePickup.checkDeliveryZipConditions()\r\n                    } else {\r\n                        // Disable the date picker if no days are enabled\r\n                        that.disableDatePickerIfNoDaysAreEnabled()\r\n\r\n                        // Display delivery date picker field\r\n                        that.displayDeliveryDatePickerField();\r\n\r\n                        var blackoutdatesCollection = that.getBlackoutDeliveryDays();\r\n\r\n                        storePickup.disableDeliveryDays(blackoutdatesCollection)\r\n                    }\r\n\r\n                    var isFormValid = form.valid();\r\n\r\n                    if (isFormValid === true) {\r\n                        var formAction = jqCR(form).attr('action');\r\n                        formAction = formAction.replace(/\\&checkout\\[shipping_address\\]\\[zip\\]=(.*?)&/ig, '')\r\n                        formAction = formAction + '&checkout[shipping_address][zip]=' + selectedZip + '&'\r\n                        jqCR(form).attr('action', formAction);\r\n                        jqCR('[name=checkout]').click()\r\n                    }\r\n                } else {\r\n                    jqCR('[name=checkout]').click()\r\n                }\r\n                // *** end delivery submit handler *** //\r\n            } else {\r\n                jqCR('[name=checkout]').click()\r\n            }\r\n        });\r\n\r\n        jqCR(\"[name='updates[]']\").on('change', function(e){\r\n            jqCR('form[action^=\"/checkout\"]').attr(\"action\",\"/cart\")\r\n        });\r\n\r\n        body.on('click tap', 'button.js-product-add', function(){\r\n            setTimeout(function () {\r\n                that.displayPickupAfterRedraw()\r\n            }, 700)\r\n        })\r\n\r\n        jqCR('.cr-calendar-icon').on('click', function(e){\r\n            if (storePickup.datePicker) {\r\n                storePickup.datePicker.open()\r\n            }\r\n        });\r\n\r\n        // Keep this for legacy code in case the template was not updated\r\n        body.on('change', '#pickup-name', function(e){\r\n            jqCR(document).trigger(\"storePickupInformationChanged\");\r\n            that.updateStorePickupInformation()\r\n        })\r\n\r\n        body.on('mouseout keyup change', '#cr-delivery-zip', function(e){\r\n            that.updateDeliveryInformation()\r\n            //that.checkDeliverySubmitHandler()\r\n        })\r\n\r\n        body.on('change', '#pickup-first-name', function(e){\r\n            that.updateStorePickupInformation()\r\n        })\r\n        body.on('change', '#pickup-last-name', function(e){\r\n            that.updateStorePickupInformation()\r\n        })\r\n\r\n        body.on('change', '#pickup-number', function(e){\r\n            that.updateStorePickupInformation()\r\n        })\r\n\r\n        body.on('change', '#pickup-email', function(e){\r\n            that.updateStorePickupInformation()\r\n        })\r\n\r\n        body.on('change', '#extra_input_1', function(e){\r\n            that.updateStorePickupInformation()\r\n        })\r\n\r\n        body.on('change', '#extra_input_2', function(e){\r\n            that.updateStorePickupInformation()\r\n        })\r\n\r\n        body.on('change', '#extra_input_3', function(e){\r\n            that.updateStorePickupInformation()\r\n        })\r\n    },\r\n    // Used only when searching for a location\r\n    storeFilter: function() {\r\n        // Filters stores by search\r\n        // Declare variables\r\n        var input, filter, ul, li, a, i;\r\n        input = document.getElementById('pickup-store-search');\r\n        filter = input.value.toUpperCase();\r\n        ul = document.getElementById(\"storeUL\");\r\n        li = ul.getElementsByTagName('li');\r\n\r\n        // Loop through all list items, and hide those who don't match the search query\r\n        for (i = 0; i < li.length; i++) {\r\n            a = li[i].getElementsByTagName(\"a\")[0];\r\n            if (a.innerHTML.toUpperCase().indexOf(filter) > -1) {\r\n                li[i].style.display = \"\";\r\n            } else {\r\n                li[i].style.display = \"none\";\r\n            }\r\n        }\r\n    },\r\n\r\n    addCartItems: function(){\r\n        //console.log('## Add cart items ##')\r\n        var that = this;\r\n        // Remove delivery product\r\n        if (typeof deliveryProduct !== \"undefined\" && deliveryProduct !== '') {\r\n            that.removeDeliveryProduct(that.addPickupProductToTheCart.bind(that))\r\n        } else {\r\n            that.addPickupProductToTheCart()\r\n        }\r\n\r\n    },\r\n\r\n    addPickupProductToTheCart: function(){\r\n        var that = this;\r\n        that.getCartItems()\r\n            .then((response) => {\r\n                var inCart = false; // Assume not currently in cart\r\n\r\n                // Check each item in cart to see if Pickup product currently in the cart\r\n                for (var item in response.items) {\r\n                    if (response.items[item].variant_id == pickupProduct) {\r\n                        inCart = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Not in cart, add pickup product to cart\r\n                if (inCart === false) {\r\n                    var productData = {\r\n                        quantity: 1,\r\n                        id: pickupProduct\r\n                    };\r\n\r\n                    jqCR.ajax({\r\n                        type: \"POST\",\r\n                        url: \"/cart/add.js\",\r\n                        data: productData,\r\n                        success: function() {\r\n                            jqCR('.min-order-message').remove();\r\n                            jqCR('[name=checkout]').removeAttr('disabled');\r\n                            if (typeof crSavePickupProperties !== \"undefined\") {\r\n                                storePickup.getCartItems().then(cart => {storePickup.cart = cart})\r\n                            }\r\n                            if(window.location.pathname.indexOf('/cart') < 0){\r\n                                //var ajaxCart = ajaxCart || '';\r\n                                if (typeof ajaxCart !== \"undefined\"){\r\n                                    ajaxCart.load();\r\n                                    if (typeof theme === \"undefined\" || typeof theme.cache === \"undefined\"){\r\n                                        setTimeout(function(){\r\n                                            that.displayPickupAfterRedraw()\r\n                                        }, 500)\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                // Reload page when adding the pickup item\r\n                                if (typeof crDeliverySettings !== \"undefined\" && crDeliverySettings.enabled === true) {\r\n                                    //console.log('Pickup added to the cart, refresh')\r\n                                    if (typeof crShowPickupFirst === 'undefined' || (typeof crShowPickupFirst !== 'undefined' && crShowPickupFirst === false)) {\r\n                                        location.reload();\r\n                                    }\r\n                                }\r\n                            }\r\n                            console.log('store pickup added')\r\n                        },\r\n                        error: function(err) {\r\n                            console.log(err);\r\n                        },\r\n                        dataType: \"json\"\r\n                    });\r\n                } else {\r\n                    // Empty delivery attributes only if delivery is enabled\r\n                    if (typeof crDeliverySettings !== 'undefined' && crDeliverySettings.enabled === true) {\r\n                        const attributes = response.attributes;\r\n                        attributes['delivery'] = ''\r\n                        attributes['Delivery_zip'] = '';\r\n                        attributes['_formattedDate'] = '';\r\n                        attributes['Delivery_date'] = '';\r\n                        attributes['Delivery_time'] = '';\r\n                        attributes['Delivery_start_time'] = '';\r\n                        var params = {\r\n                            type: 'POST',\r\n                            url: '/cart/update.js',\r\n                            data: {\r\n                                attributes: attributes\r\n                            },\r\n                            dataType: 'json',\r\n                            success: function() {\r\n                                console.log('Delivery attributes were emptied');\r\n                            },\r\n                            error: function(XMLHttpRequest, textStatus) {\r\n                                console.log(XMLHttpRequest, textStatus);\r\n                            }\r\n                        };\r\n                        jqCR.ajax(params);\r\n                    }\r\n                }\r\n            });\r\n    },\r\n\r\n    addDeliveryItem: function(cart){\r\n        var that = this;\r\n\r\n        const attributes = cart.attributes;\r\n        attributes['pickup'] = ''\r\n        attributes['Pickup_Information'] = '';\r\n        attributes['Pickup_StoreID'] = '';\r\n        attributes['_unixTimestamp'] = '';\r\n        attributes['_formattedDate'] = '';\r\n        attributes['Pickup_date'] = '';\r\n        attributes['Pickup_time']  = '';\r\n        attributes['Pickup_name']  = '';\r\n        attributes['Pickup_phone']  = '';\r\n        attributes['Pickup_extra1']  = '';\r\n        attributes['Pickup_extra2']  = '';\r\n        attributes['Pickup_extra3']  = '';\r\n        attributes['Pickup_Store']  = '';\r\n        attributes['delivery'] = 1;\r\n\r\n        jqCR.post('/cart/update.js',{attributes}, function(response) {\r\n            console.log('attributes updates')\r\n            var inCart = false; // Assume not currently in cart\r\n\r\n            // Check each item in cart to see if delivery product currently in the cart\r\n            for (var item in cart.items) {\r\n                if (cart.items[item].variant_id == deliveryProduct) {\r\n                    inCart = true;\r\n                }\r\n            }\r\n\r\n            // Not in cart, add delivery product to cart\r\n            if (inCart === true) return;\r\n\r\n            var productData = {\r\n                quantity: 1,\r\n                id: deliveryProduct\r\n            };\r\n\r\n            jqCR.ajax({\r\n                type: \"POST\",\r\n                url: \"/cart/add.js\",\r\n                data: productData,\r\n                success: function() {\r\n                    if(window.location.pathname.indexOf('/cart') < 0){\r\n                        if (typeof ajaxCart !== \"undefined\"){\r\n                            ajaxCart.load();\r\n                            if (typeof theme === \"undefined\" || typeof theme.cache === \"undefined\"){\r\n                                setTimeout(function(){\r\n                                    that.displayDeliveryAfterRedraw()\r\n                                }, 500)\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // Reload page when adding the delivery item\r\n                        location.reload();\r\n                    }\r\n                },\r\n                error: function(err) {\r\n                    console.log(err);\r\n                },\r\n                dataType: \"json\"\r\n            });\r\n\r\n        }, 'json')\r\n    },\r\n\r\n    displayPickupAfterRedraw: function(){\r\n        let that = this;\r\n        if (!jqCR('.pickup-button').hasClass('selected')) {\r\n            console.log('reload pickup')\r\n            that.getCartItems().then(cart => {\r\n                //that.activatePickupButton();\r\n                that.changePickupButtonText();\r\n                that.activatePickupButtonIfItemInCart(cart);\r\n                that.setDatePicker();\r\n                that.displayStores();\r\n            });\r\n\r\n        }\r\n    },\r\n\r\n    displayDeliveryAfterRedraw: function(){\r\n        let that = this;\r\n        console.log('display delivery after redraw')\r\n        // if (!jqCR('.pickup-button').hasClass('selected')) {\r\n        //     console.log('reload pickup')\r\n        //     that.getCartItems().then(cart => {\r\n        //         //that.activatePickupButton();\r\n        //         that.changePickupButtonText();\r\n        //         that.activatePickupButtonIfItemInCart(cart);\r\n        //         that.setDatePicker();\r\n        //         that.displayStores();\r\n        //     });\r\n        //\r\n        // }\r\n    },\r\n\r\n    removePickupProduct: function(reload){\r\n        var that = this;\r\n        this.getCartItems()\r\n            .then((response) => {\r\n                //Check each item in cart to see if Pickup product currently in the cart\r\n                let found = false;\r\n                for (var item in response.items) {\r\n                    if (response.items[item].variant_id == pickupProduct) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (found === true) {\r\n                    // Changes quantity of item in cart to 0.\r\n                    var productData = {\r\n                        quantity: 0,\r\n                        id: pickupProduct\r\n                    };\r\n                    jqCR.post('/cart/change.js', productData, function(res, err) {\r\n                        if (err != \"success\") {\r\n                            console.log(err);\r\n                        } else {\r\n                            //@todo remove pickup attributes - at the moment this is not the case, because page is being reloaded\r\n                            if(window.location.pathname.indexOf('/cart') > -1){\r\n                                location.reload();\r\n                            } else {\r\n                                //var ajaxCart = ajaxCart || '';\r\n                                if (typeof ajaxCart !== \"undefined\"){\r\n                                    console.log('redraw');\r\n                                    ajaxCart.load();\r\n                                    if (typeof theme === \"undefined\") {\r\n                                        setTimeout(function(){\r\n                                            that.displayPickupAfterRedraw()\r\n                                        }, 500)\r\n                                    } else if (typeof theme.cache === \"undefined\"){\r\n                                        setTimeout(function(){\r\n                                            that.displayPickupAfterRedraw()\r\n                                        }, 500)\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                    }, 'json');\r\n                } else if (reload === true) {\r\n                    location.reload();\r\n                } else {\r\n                    if(typeof CRcarrierServiceEnabled !== \"undefined\" && CRcarrierServiceEnabled === true && response.items.length) {\r\n                        console.log('Add line property #5')\r\n                        that.addLineProperty(response, 'shipping');\r\n                    }\r\n                }\r\n            });\r\n    },\r\n\r\n    removeDeliveryProduct: function(callback){\r\n        var that = this;\r\n        var productData = {quantity: 0, id: deliveryProduct}\r\n        jqCR.post('/cart/change.js', productData, function() {\r\n            console.log('Delivery product removed')\r\n            if (typeof callback === \"function\") {\r\n                callback();\r\n            }\r\n\r\n        }, 'json')\r\n    },\r\n\r\n    getCartItems: function(){\r\n        return new Promise((resolve, reject) => {\r\n            jqCR.ajax({\r\n                url: '/cart.js',\r\n                type: 'GET',\r\n                dataType: 'json',\r\n                success: function(response) {\r\n                    resolve(response)\r\n                },\r\n                error: function(e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        })\r\n    },\r\n    displayExtraFields: function(){\r\n        var that = this;\r\n        var settings = this.settings();\r\n\r\n        // Display extra fields\r\n        // Hide/show extra 1\r\n        if (settings.extra_input_1 && settings.extra_input_1.trim() !== '') {\r\n            jqCR('#extra_input_1_label').text(settings.extra_input_1.replace(/\\&apos;/g, '\\''));\r\n            jqCR('#extra_input_1').rules('add', {\r\n                \"required\": true,\r\n                \"messages\": {\r\n                    \"required\": that.translations[that.language].extraField1Error\r\n                }\r\n            });\r\n        } else {\r\n            jqCR('.extra_input_1_wrapper').css('display', 'none');\r\n        }\r\n\r\n        // Hide/show extra 2\r\n        if (settings.extra_input_2 && settings.extra_input_2.trim() !== '') {\r\n            jqCR('#extra_input_2_label').text(settings.extra_input_2.replace(/\\&apos;/g, '\\''));\r\n            jqCR('#extra_input_2').rules('add', {\r\n                \"required\": true,\r\n                \"messages\": {\r\n                    \"required\": that.translations[that.language].extraField2Error\r\n                }\r\n            });\r\n        } else {\r\n            jqCR('.extra_input_2_wrapper').css('display', 'none');\r\n        }\r\n\r\n        // Hide/show extra 3\r\n        if (settings.extra_input_3 && settings.extra_input_3.trim() !== '') {\r\n            jqCR('#extra_input_3_label').text(settings.extra_input_3.replace(/\\&apos;/g, '\\''));\r\n            jqCR('#extra_input_3').rules('add', {\r\n                \"required\": true,\r\n                \"messages\": {\r\n                    \"required\": that.translations[that.language].extraField3Error\r\n                }\r\n            });\r\n        } else {\r\n            jqCR('.extra_input_3_wrapper').css('display', 'none');\r\n        }\r\n    },\r\n\r\n    // Used to validate if selected store is valid\r\n    validateSubmiHandler: function(form){\r\n        var that = this;\r\n        var settings = this.settings();\r\n        var extra1 = jqCR('#extra_input_1').val()\r\n        var extra2 = jqCR('#extra_input_2').val()\r\n        var extra3 = jqCR('#extra_input_3').val()\r\n\r\n        //var form = this.submitForm();\r\n        var validator = jqCR(form).validate()\r\n        var valid = true;\r\n\r\n        // Prevent extra field form being empty\r\n        if (settings.extra_input_1 && extra1.trim() == '') {\r\n            validator.showErrors({\r\n                \"extra_input_1\": that.translations[that.language].extraField1Error\r\n            });\r\n            valid = false;\r\n        }\r\n\r\n        // Prevent extra field form being empty\r\n        if (settings.extra_input_2 && extra2.trim() == '') {\r\n            validator.showErrors({\r\n                \"extra_input_2\": that.translations[that.language].extraField2Error\r\n            });\r\n            valid = false;\r\n        }\r\n\r\n        // Prevent extra field form being empty\r\n        if (settings.extra_input_3 && extra3.trim() == '') {\r\n            validator.showErrors({\r\n                \"extra_input_3\": that.translations[that.language].extraField1Error\r\n            });\r\n            valid = false;\r\n        }\r\n        if (valid === false) return;\r\n\r\n        if (jqCR('#pickup-container').is(\":visible\")\r\n            && jqCR('.pickup-button').hasClass('selected')\r\n            && jqCR('.activeStore').attr('id') === undefined\r\n            && stores !== undefined\r\n            && stores.length> 1\r\n        ) {\r\n            jqCR('.searchTerm').css('display', 'block')\r\n            jqCR('#pickup-store-search').val('')\r\n            jqCR('#pickup-store-search-error').remove()\r\n            jqCR('#storeUL').after('<label id=\"pickup-store-search-error\" class=\"error\" for=\"storeUL\">' + that.translations[that.language].storeSelectError + '</label>');\r\n            jqCR('#pickup-store-search-error').text(that.translations[that.language].storeSelectError)\r\n            jqCR('#pickup-store-search-error').css('display', 'block')\r\n\r\n        } else {\r\n            form.submit();\r\n        }\r\n    },\r\n\r\n    pickupBoxChange: function() {\r\n        console.log('Pickup box change')\r\n\r\n        var that = this;\r\n        var form = this.submitForm();\r\n        var settings = this.settings();\r\n\r\n        jqCR('.min-order-message').remove();\r\n        jqCR('[name=checkout]').removeAttr('disabled');\r\n\r\n        // Remove selected from all the buttons\r\n        jqCR('.cr-shipping-method, .cr-delivery-button').removeClass('selected')\r\n        jqCR('.delivery-method-desc, #cr-delivery-details').hide()\r\n\r\n        jqCR(document).trigger(\"storePickupActivated\");\r\n\r\n        var crPickupEvent = document.createEvent('Event');\r\n        crPickupEvent.initEvent('crPickupActivated', true, true);\r\n        document.dispatchEvent(crPickupEvent);\r\n\r\n        // Needed for top drawers\r\n        jqCR('#ajaxifyDrawer').css('overflow', 'auto');\r\n        jqCR('.drawer--has-fixed-footer .drawer__inner').css('overflow', 'auto');\r\n\r\n        jqCR('[name=\"update\"]').on('click', function(e){\r\n            e.preventDefault();\r\n            jqCR('.crDeleteOnUpdate').remove();\r\n            form.off().attr('action', '/cart').submit()\r\n        });\r\n\r\n        jqCR(form).validate({\r\n            submitHandler: that.validateSubmiHandler.bind(that)\r\n        });\r\n        //console.log(jqCR('.js-toggle-pickup').hasClass('selected'))\r\n\r\n        // If user has selected to pickup or cart contains pickup product\r\n        if(jqCR('.js-toggle-pickup').hasClass('selected')) {\r\n            jqCR('#pickup-attribute').val('1')\r\n            jqCR('#delivery-attribute').val('0')\r\n            this.updateFormActionWithShippingInformation();\r\n            jqCR('#pickup-details').show();\r\n            if (typeof CRpickupProductEnabled === 'undefined' || (typeof CRpickupProductEnabled !== 'undefined' && CRpickupProductEnabled === true)) {\r\n                this.addCartItems(); // Add pickup product to the cart\r\n            }\r\n\r\n            // Hide/show date\r\n            if (settings.date_enabled) {\r\n                // If enabled, add validation rules\r\n                //let dateErrorMessage = pickupTranslations.en\r\n                jqCR(\"#pickup-date-start\").rules('add', {\r\n                    \"required\": true,\r\n                    \"messages\": {\r\n                        \"required\": that.translations[that.language].pickupDateError\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Hide/show phone\r\n            if (settings.phone) {\r\n                jqCR(\"#pickup-number\").rules('add', {\r\n                    \"required\": true,\r\n                    \"messages\": {\r\n                        \"required\": that.translations[that.language].contactNumberError\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (settings.email) {\r\n                jqCR(\"#pickup-email\").rules('add', {\r\n                    \"required\": true,\r\n                    \"messages\": {\r\n                        \"required\": that.translations[that.language].emailError\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Hide/show name\r\n            if (settings.name) {\r\n                jqCR('#pickup-name').rules('add', {\r\n                    required: true,\r\n                    messages: {\r\n                        required: that.translations[that.language].nameOfPersonCollectingError\r\n                    }\r\n                });\r\n\r\n                jqCR('#pickup-first-name').rules('add', {\r\n                    required: true,\r\n                    messages: {\r\n                        required: that.translations[that.language].pickupFirstNameError\r\n                    }\r\n                });\r\n\r\n                jqCR('#pickup-last-name').rules('add', {\r\n                    required: true,\r\n                    messages: {\r\n                        required: that.translations[that.language].pickupLastNameError\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Hide/show store search\r\n            if (stores !== undefined && stores !== '' && stores.length > 1) {\r\n                // var rules = ($j('#pickup-store').rules());\r\n                // console.log(rules);\r\n                jqCR('#pickup-store-search').rules('add', {\r\n                    \"required\": true,\r\n                    \"messages\": {\r\n                        \"required\": that.translations[that.language].storeSelectError\r\n                    }\r\n                });\r\n            } else {\r\n                jqCR('#store-search').css('display', 'none'); // Hide store search\r\n            }\r\n            this.displayExtraFields();\r\n            jqCR('#pickup-details').css('display', 'inline !important'); // Show extra info\r\n        } else {\r\n            jqCR('.cr-shipping-method').addClass('selected'); // Display as selected the shipping method\r\n            jqCR('#pickup-attribute').val('')\r\n\r\n            if(jqCR(\"#pickup-date-start\").length){\r\n                jqCR(\"#pickup-date-start\").rules('remove');\r\n            }\r\n\r\n            if (jqCR(\"#pickup-number\").length){\r\n                jqCR(\"#pickup-number\").rules('remove');\r\n            }\r\n\r\n            if (jqCR(\"#pickup-email\").length){\r\n                jqCR(\"#pickup-email\").rules('remove');\r\n            }\r\n\r\n            if (jqCR('#pickup-name').length){\r\n                jqCR('#pickup-name').rules('remove');\r\n            }\r\n\r\n            if (jqCR('#pickup-first-name').length) {\r\n                jqCR('#pickup-first-name').rules('remove');\r\n            }\r\n\r\n            if (jqCR('#pickup-last-name').length){\r\n                jqCR('#pickup-last-name').rules('remove');\r\n            }\r\n\r\n            if (jqCR('#pickup-store-search').length) {\r\n                jqCR('#pickup-store-search').rules('remove');\r\n            }\r\n\r\n            // Pickup not checked. Hide display.\r\n            jqCR('#pickup-details').css('display', 'none'); // Hide extra info\r\n            if (typeof deliveryProduct !== \"undefined\" && deliveryProduct !== '' && CRexcludedFromPickup === false) {\r\n                that.removeDeliveryProduct(that.removePickupProduct.bind(that, true))\r\n            } else {\r\n                that.removePickupProduct();\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n    checkDeliveryZipConditions: function(){\r\n        var that = this;\r\n        var blackoutdatesCollection = storePickup.getBlackoutDeliveryDays();\r\n\r\n        if(typeof crDeliverySettings !== \"undefined\" && crDeliverySettings.askForZip === true) {\r\n            let selectedZip = jqCR('#cr-delivery-zip').val();\r\n            if (selectedZip) {\r\n                selectedZip = selectedZip.replace(/\\s+/gi, '')\r\n            }\r\n            let disableDays = [1, 2, 3, 4, 5, 6, 7];//that.getDisabledDaysArray();//\r\n\r\n            // Monday\r\n            const mondays = typeof crDeliverySettings.mondayDeliveryZips !== \"undefined\"? crDeliverySettings.mondayDeliveryZips.replace(/\\s+/ig,' ').split(',') : [];\r\n            for (let i in mondays) {\r\n                if(typeof mondays[i] === 'function') continue;\r\n                let zip = mondays[i].trim();\r\n\r\n                if (!zip) continue;\r\n                zip = zip.replace(/\\s+/gi, '')\r\n                var regex = RegExp('^' + zip, 'gi');\r\n                if (regex.test(selectedZip) === true) {\r\n                    const removeDay = 2;\r\n                    disableDays = that.arrayRemove(disableDays, removeDay);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Tuesday\r\n            const tuesdays = typeof crDeliverySettings.tuesdayDeliveryZips !== \"undefined\"? crDeliverySettings.tuesdayDeliveryZips.replace(/\\s+/ig,' ').split(',') : [];\r\n            for (let i in tuesdays) {\r\n                if(typeof tuesdays[i] === 'function') continue;\r\n                let zip = tuesdays[i].trim();\r\n\r\n                if (!zip) continue;\r\n                zip = zip.replace(/\\s+/gi, '')\r\n                var regex = RegExp('^' + zip, 'gi');\r\n                if (regex.test(selectedZip) === true) {\r\n                    const removeDay = 3;\r\n                    disableDays = that.arrayRemove(disableDays, removeDay);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Wednesday\r\n            const wednesdays = typeof crDeliverySettings.wednesdayDeliveryZips !== \"undefined\"? crDeliverySettings.wednesdayDeliveryZips.replace(/\\s+/ig,' ').split(',') : [];\r\n            for (let i in wednesdays) {\r\n                if(typeof wednesdays[i] === 'function') continue;\r\n                let zip = wednesdays[i].trim();\r\n\r\n                if (!zip) continue;\r\n                zip = zip.replace(/\\s+/gi, '')\r\n                var regex = RegExp('^' + zip, 'gi');\r\n\r\n                if (regex.test(selectedZip) === true) {\r\n                    let removeDay = 4;\r\n                    disableDays = that.arrayRemove(disableDays, removeDay);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Thurdsay\r\n            const thursdays = typeof crDeliverySettings.thursdayDeliveryZips !== \"undefined\"? crDeliverySettings.thursdayDeliveryZips.replace(/\\s+/ig,' ').split(',') : [];\r\n            for (let i in thursdays) {\r\n                if(typeof thursdays[i] === 'function') continue;\r\n                let zip = thursdays[i].trim();\r\n                if (!zip) continue;\r\n                zip = zip.replace(/\\s+/gi, '')\r\n                var regex = RegExp('^' + zip, 'gi');\r\n                if (regex.test(selectedZip) === true) {\r\n                    let removeDay = 5;\r\n                    disableDays = that.arrayRemove(disableDays, removeDay);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Friday\r\n            const fridays = typeof crDeliverySettings.fridayDeliveryZips !== \"undefined\"? crDeliverySettings.fridayDeliveryZips.replace(/\\s+/ig,' ').split(',') : [];\r\n            for (let i in fridays) {\r\n                if(typeof fridays[i] === 'function') continue;\r\n                let zip = fridays[i].trim();\r\n                if (!zip) continue;\r\n                zip = zip.replace(/\\s+/gi, '')\r\n                var regex = RegExp('^' + zip, 'gi');\r\n                if (regex.test(selectedZip) === true) {\r\n                    let removeDay = 6;\r\n                    disableDays = that.arrayRemove(disableDays, removeDay);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Saturday\r\n            const saturdays = typeof crDeliverySettings.saturdayDeliveryZips !== \"undefined\"? crDeliverySettings.saturdayDeliveryZips.replace(/\\s+/ig,' ').split(',') : [];\r\n            for (let i in saturdays) {\r\n                if(typeof saturdays[i] === 'function') continue;\r\n                let zip = saturdays[i].trim();\r\n                if (!zip) continue;\r\n                zip = zip.replace(/\\s+/gi, '')\r\n                var regex = RegExp('^' + zip, 'gi');\r\n                if (regex.test(selectedZip) === true) {\r\n                    let removeDay = 7;\r\n                    disableDays = that.arrayRemove(disableDays, removeDay);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Sunday\r\n            const sundays = typeof crDeliverySettings.sundayDeliveryZips !== \"undefined\"? crDeliverySettings.sundayDeliveryZips.replace(/\\s+/ig,' ').split(',') : [];\r\n            for (let i in sundays) {\r\n                if(typeof sundays[i] === 'function') continue;\r\n                let zip = sundays[i].trim();\r\n                if (!zip) continue;\r\n                zip = zip.replace(/\\s+/gi, '')\r\n                var regex = RegExp('^' + zip, 'gi');\r\n                if (regex.test(selectedZip) === true) {\r\n                    let removeDay = 1;\r\n                    disableDays = that.arrayRemove(disableDays, removeDay);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Disable the date picker if no days are enabled\r\n            that.disableDatePickerIfNoDaysAreEnabled()\r\n\r\n            // Display delivery date picker field\r\n            that.displayDeliveryDatePickerField();\r\n\r\n            if (disableDays.length < 7) {\r\n                //that.datePicker.set('enable', true);// don't disable this it might get into an infinite loop\r\n                //that.datePicker.set('disable', disableDays);\r\n                storePickup.disableDeliveryDays(disableDays)\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    disableDatePickerIfNoDaysAreEnabled: function(){\r\n        // Disable the date picker if no days are enabled\r\n        if (typeof crDeliverySettings.deliveryDays !== \"undefined\" && !crDeliverySettings.deliveryDays.length){\r\n            jqCR('.cr-delivery-date-wrapper').remove();\r\n        }\r\n    },\r\n\r\n    displayDeliveryDatePickerField: function(){\r\n        if (typeof crHideDeliveryDate === \"undefined\") {\r\n\r\n            var crPickupEvent = document.createEvent('Event');\r\n            crPickupEvent.initEvent('crDisplayDeliveryDate', true, true);\r\n            document.dispatchEvent(crPickupEvent);\r\n\r\n            jqCR('.cr-delivery-date-wrapper').removeClass('cr-hide')\r\n            jqCR('.cr-delivery-date-wrapper').removeClass('hide')\r\n        } else {\r\n            var zip = jqCR('#cr-delivery-zip').val();\r\n            if (typeof ifThisZipDisplayDeliveryCalendar !== \"undefined\" && ifThisZipDisplayDeliveryCalendar(zip)) {\r\n                jqCR('.cr-delivery-date-wrapper').removeClass('cr-hide')\r\n                jqCR('.cr-delivery-date-wrapper').removeClass('hide')\r\n            }\r\n        }\r\n    },\r\n\r\n    updateDeliveryInformation: function() {\r\n        const settings = this.settings();\r\n        const attributes = {};\r\n\r\n        // Reset pickup attributes\r\n        attributes['pickup'] = '';\r\n        attributes['Pickup_Information'] = '';\r\n        attributes['Pickup_StoreID'] = '';\r\n        attributes['_unixTimestamp'] = '';\r\n        attributes['_formattedDate'] = '';\r\n        attributes['Pickup_date'] = '';\r\n        attributes['Pickup_time']  = '';\r\n        attributes['Pickup_name']  = '';\r\n        attributes['Pickup_phone']  = '';\r\n        attributes['Pickup_extra1']  = '';\r\n        attributes['Pickup_extra2']  = '';\r\n        attributes['Pickup_extra3']  = '';\r\n        attributes['Pickup_Store']  = '';\r\n\r\n        if (settings.saveOnChange){\r\n            console.log('Delivery information saved');\r\n            attributes['delivery'] = 1;\r\n            attributes['Delivery_zip'] = jqCR('#cr-delivery-zip').val();\r\n            attributes['_formattedDate'] = storePickup.formattedDate;\r\n\r\n            attributes['Delivery_date'] = jqCR('#note-delivery-date').val();\r\n            attributes['Delivery_time'] = jqCR('#note-delivery-time').val();\r\n            attributes['Delivery_start_time'] = jqCR('#note-delivery-start-time').val()\r\n\r\n            storePickup.updateCartAttributes(attributes)\r\n        }\r\n    },\r\n\r\n    updateStorePickupInformation: function (){\r\n        var that = this;\r\n        var settings = this.settings();\r\n        var storePickupInformation = '';\r\n        var pickupDate = jqCR('#pickup-date-start').val();\r\n        var changed = false;\r\n        var attributes = {};\r\n\r\n        attributes['delivery'] = '';\r\n        attributes['Delivery_zip'] = '';\r\n        attributes['_formattedDate'] = '';\r\n        attributes['Delivery_date'] = '';\r\n        attributes['Delivery_time'] = '';\r\n        attributes['Delivery_start_time'] = '';\r\n\r\n        if (typeof pickupDate !== 'undefined' && pickupDate !== '') {\r\n            var chunks = pickupDate.split('@')\r\n            var selectedPickupDate = chunks[0].trim();\r\n            storePickupInformation += ' Pickup Date: ' + selectedPickupDate;\r\n            jqCR('#note-pickup-date').val(selectedPickupDate);\r\n            attributes['Pickup_date'] = selectedPickupDate;\r\n            changed = true;\r\n        }\r\n\r\n        var pickupTime = jqCR('#pickup-time').val();\r\n        if (typeof pickupTime !== 'undefined' && pickupTime.trim() !== '') {\r\n            storePickupInformation += ' Pickup Time: ' + pickupTime;\r\n            jqCR('#note-pickup-time').val(pickupTime);\r\n            attributes['Pickup_time'] = pickupTime;\r\n            changed = true;\r\n        }\r\n\r\n        var firstName = jqCR('#pickup-first-name').val();\r\n        var lastName = jqCR('#pickup-last-name').val();\r\n        var pickupName = '';\r\n        if (!firstName && !lastName) {\r\n            pickupName = jqCR('#pickup-name').val();\r\n            attributes['Pickup_name'] = '';\r\n        } else {\r\n            pickupName = firstName + ' ' + lastName;\r\n            jqCR('#pickup-name').val(pickupName);\r\n            attributes['Pickup_name'] = pickupName;\r\n        }\r\n\r\n        if (typeof pickupName !== 'undefined' && pickupName !== ''){\r\n            storePickupInformation += ' Name of person collecting: ' + pickupName;\r\n            jqCR('#note-pickup-name').val(pickupName);\r\n            attributes['Pickup_name'] = pickupName;\r\n            changed = true;\r\n        }\r\n        if (firstName) {\r\n            firstName = firstName.trim();\r\n            var pivot = that.shippingInformation.replace(/checkout\\[shipping_address\\]\\[first_name\\]=(.*?)\\&/ig, '');\r\n            that.shippingInformation = pivot + \"&checkout[shipping_address][first_name]=\" + firstName + '&';\r\n            jqCR('#cr-checkout-shipping-first-name').val(firstName)\r\n            that.updateFormActionWithShippingInformation();\r\n            changed = true;\r\n        }\r\n\r\n        if (lastName) {\r\n            lastName = lastName.trim();\r\n            jqCR('#cr-checkout-shipping-last-name').val(lastName)\r\n            var pivot = that.shippingInformation.replace(/checkout\\[shipping_address\\]\\[last_name\\]=(.*?)\\&/ig, '');\r\n            that.shippingInformation = pivot + \"&checkout[shipping_address][last_name]=\" + lastName + '&';\r\n            that.updateFormActionWithShippingInformation();\r\n            changed = true;\r\n        }\r\n\r\n        var pickupNumber = jqCR('#pickup-number').val()\r\n        if (typeof pickupNumber !== 'undefined' && pickupNumber !== '') {\r\n            jqCR('#cr-checkout-shipping-phone').val(pickupNumber)\r\n            storePickupInformation += ' Contact Number: ' + pickupNumber;\r\n            jqCR('#note-pickup-phone').val(pickupNumber);\r\n            attributes['Pickup_phone'] = pickupNumber;\r\n            var pivot = that.shippingInformation.replace(/checkout\\[shipping_address\\]\\[phone\\]=(.*?)\\&/ig, '');\r\n            that.shippingInformation = pivot + \"&checkout[shipping_address][phone]=\" + pickupNumber + '&';\r\n            that.updateFormActionWithShippingInformation();\r\n            changed = true;\r\n        }\r\n\r\n        var pickupEmail = jqCR('#pickup-email').val()\r\n        if (typeof pickupEmail !== 'undefined' && pickupEmail !== '') {\r\n            jqCR('#cr-checkout-email_or_phone').val(pickupEmail)\r\n            var pivot = that.shippingInformation.replace(/checkout\\[email_or_phone\\]=(.*?)\\&/ig, '');\r\n            that.shippingInformation = pivot + \"&checkout[email_or_phone]=\" + pickupEmail + '&';\r\n            that.updateFormActionWithShippingInformation();\r\n            changed = true;\r\n        }\r\n\r\n        var extraInput1 = jqCR('#extra_input_1').val();\r\n        if (typeof extraInput1 !== 'undefined' && extraInput1 !== '') {\r\n            storePickupInformation += ' ' + settings.extra_input_1 + ': ' + extraInput1;\r\n            jqCR('#note-pickup-extra1').val(extraInput1);\r\n            attributes['Pickup_extra1'] = extraInput1;\r\n            changed = true;\r\n        }\r\n\r\n        var extraInput2 = jqCR('#extra_input_2').val();\r\n        if (typeof extraInput2 !== 'undefined' && extraInput2 !== '') {\r\n            storePickupInformation += ' ' + settings.extra_input_2 + ': ' + extraInput2;\r\n            jqCR('#note-pickup-extra2').val(extraInput2);\r\n            attributes['Pickup_extra2'] = extraInput2;\r\n            changed = true;\r\n        }\r\n\r\n        var extraInput3 = jqCR('#extra_input_3').val();\r\n        if (typeof extraInput3 !== 'undefined' && extraInput3 !== '') {\r\n            storePickupInformation += ' ' + settings.extra_input_3 + ': ' + extraInput3;\r\n            jqCR('#note-pickup-extra3').val(extraInput3);\r\n            attributes['Pickup_extra3'] = extraInput3;\r\n            changed = true;\r\n        }\r\n\r\n        if (jqCR('.activeStore').html() !== undefined) {\r\n            var selectedStore = ''\r\n            if (settings.locationsInASelect) {\r\n                selectedStore = jqCR('.activeStore').html();\r\n                if (CRpermanentDomain === 'osgmerch.myshopify.com' || CRpermanentDomain === 'osgmerch-carib.myshopify.com') {\r\n                    selectedStore = jqCR('.activeStore').data('name');\r\n                }\r\n            } else {\r\n                var selectedName = jqCR('li.activeStore > a').data('name').trim();\r\n                var selectedZip = jqCR('li.activeStore > a').data('zip-code');\r\n                var selectedAddress = jqCR('li.activeStore > a').data('address').trim();\r\n                var selectedCity = jqCR('li.activeStore > a').data('city').trim();\r\n                var selectedCountry = jqCR('li.activeStore > a').data('country').trim();\r\n                var selectedProvince = jqCR('li.activeStore > a').data('province').trim();\r\n\r\n                //selectedStore = jqCR('li.activeStore > a strong').text();\r\n                if (CRpermanentDomain === 'frubana.myshopify.com' || CRpermanentDomain === 'our-hk-mall.myshopify.com' || CRpermanentDomain === 'baklava-couture.myshopify.com') {\r\n                    selectedStore = jqCR('li.activeStore > a strong').text();\r\n                } else {\r\n                    selectedStore = selectedCity === ''?\r\n                        selectedName + ', ' + selectedAddress + ', ' + selectedProvince + ' ' + selectedZip :\r\n                        selectedName + ', ' + selectedAddress + ', ' + selectedCity + ' ' + selectedZip + ',  ' + selectedProvince\r\n                }\r\n\r\n            }\r\n            if (typeof CRSelectedStore !== 'undefined') {\r\n                selectedStore = selectedName;\r\n            }\r\n            if (typeof CROverrideStoreName !== 'undefined') {\r\n                selectedStore = jqCR('.activeStore').data('name');\r\n                if (typeof selectedStore === 'undefined') {\r\n                    selectedStore = jqCR('.activeStore > a').data('name');\r\n                }\r\n            }\r\n            storePickupInformation += ' Selected store: ' + selectedStore\r\n            jqCR('#pickup-selected-store').val(selectedStore);\r\n            attributes['Pickup_Store'] = selectedStore;\r\n            changed = true;\r\n        }\r\n\r\n        jqCR('#pickup-information').val(storePickupInformation.trim())\r\n        jqCR('.cart__checkout--page').removeClass('btn--loading');\r\n        jqCR('.cart__checkout').removeClass('btn--loading');\r\n\r\n        if (that.selectedStoreId) {\r\n            attributes['Pickup_StoreID'] = that.selectedStoreId;\r\n            jqCR('#pickup-selected-store-id').val(that.selectedStoreId)\r\n        }\r\n\r\n        if (that.formattedDateTime) {\r\n            attributes['_formattedDate'] = that.formattedDateTime;\r\n            jqCR('#pickup-selected-date').val(that.formattedDateTime)\r\n        } else {\r\n            attributes['_formattedDate'] = that.formattedDate;\r\n            jqCR('#pickup-selected-date').val(that.formattedDate)\r\n        }\r\n\r\n        if (that.unixTimestamp) {\r\n            jqCR('#pickup-unixtimestamp').val(that.unixTimestamp)\r\n            attributes['_unixTimestamp'] = that.unixTimestamp;\r\n        } else {\r\n            var unixTimestamp = new Date(that.formattedDate).getTime() / 1000;\r\n            jqCR('#pickup-unixtimestamp').val(unixTimestamp)\r\n            attributes['_unixTimestamp'] = unixTimestamp;\r\n        }\r\n\r\n        if (changed && settings.saveOnChange){\r\n            console.log('Pickup information saved');\r\n            attributes['pickup'] = 1;\r\n            that.updateCartAttributes(attributes);\r\n            if (typeof crSavePickupProperties !== \"undefined\") {\r\n                that.addPickupProperties(attributes);\r\n            }\r\n        }\r\n    },\r\n\r\n    addPickupProperties: function(attributes) {\r\n        var cart = storePickup.cart;\r\n        if (!cart || !cart.items) return;\r\n        //console.log(attributes.length)\r\n        for (let key in attributes) {\r\n            if (attributes[key] == '') delete attributes[key]\r\n        }\r\n\r\n        var items = cart.items;\r\n        // check line number of the pickup product\r\n        let counter = 0;\r\n        let lineItem = -1;\r\n        for (var item of items) {\r\n            counter++\r\n            if (item.id == pickupProduct) {lineItem = counter;break;}\r\n        }\r\n        // If pickup product was found, update its properties\r\n        if (lineItem > -1) {\r\n            var params = {\r\n                'line': lineItem,\r\n                'properties': attributes,\r\n                'quantity': 1\r\n            }\r\n            var req = {\r\n                type: 'POST',\r\n                url: '/cart/change.js',\r\n                data: params,\r\n                dataType: 'json',\r\n                success: function(res) {\r\n                    console.log('Data saved')\r\n                },\r\n                error: function(XMLHttpRequest, textStatus) {\r\n                    console.log('Error')\r\n                }\r\n            };\r\n\r\n            jqCR.ajax(req);\r\n        }\r\n    },\r\n\r\n    updateCartAttributes: function(attributes, callback) {\r\n        var that = this;\r\n        var params = {\r\n            type: 'POST',\r\n            url: '/cart/update.js',\r\n            data: {\r\n                attributes: attributes\r\n            },\r\n            dataType: 'json',\r\n            success: function() {\r\n                console.log('Updated cart');\r\n                callback;\r\n            },\r\n            error: function(XMLHttpRequest, textStatus) {\r\n                console.log(XMLHttpRequest, textStatus);\r\n                if (typeof crReloadOnError !== 'undefined' && crReloadOnError === true) location.reload();\r\n            }\r\n        };\r\n        jqCR.ajax(params);\r\n    },\r\n\r\n    submitForm: function(){\r\n        let foundForm = false;\r\n        var that = this;\r\n        let myForm = jqCR('#pickup-details').closest('form')\r\n\r\n        if (!myForm.length){\r\n            for (var n in jqCR('form')) {\r\n                var testForm = jqCR('form')[n]; // Create $jq to test the form attributes\r\n                if(testForm.attributes && testForm.attributes.class && testForm.attributes.class.value == 'mini-cart') continue;\r\n                if(testForm.attributes && testForm.attributes.class && testForm.attributes.class.value.indexOf('ajaxcart') > -1) continue;\r\n                if (testForm.attributes && testForm.attributes.action && testForm.attributes.action.value.indexOf('/cart') > -1\r\n                    && testForm.attributes.class\r\n                    && testForm.attributes.class.value.indexOf('cart') > -1\r\n                    && testForm.attributes.action.value.indexOf('/add') < 0\r\n                ) { // We have a winner\r\n                    return jqCR(testForm)[0];\r\n                };\r\n            };\r\n        } else {\r\n            return myForm;\r\n        }\r\n\r\n        if (!foundForm) {\r\n            for (var n in jqCR('form')) {\r\n                var testForm = jqCR('form')[n]; // Create $jq to test the form attributes\r\n                if(testForm.attributes && testForm.attributes.class && testForm.attributes.class.value == 'mini-cart') continue;\r\n                if(testForm.attributes && testForm.attributes.class && testForm.attributes.class.value.indexOf('mm-menu') > -1) continue;\r\n                if (testForm.attributes && testForm.attributes.action && testForm.attributes.action.value.indexOf('/cart') > -1\r\n                    && testForm.attributes.action.value.indexOf('/add') < 0\r\n                ) { // We have a winner\r\n                    return jqCR(testForm)[0];\r\n                };\r\n            };\r\n        }\r\n        if (!foundForm) {\r\n            for (var n in jqCR('form')) {\r\n                var testForm = jqCR('form')[n]; // Create $jq to test the form attributes\r\n                if(testForm.attributes && testForm.attributes.class && testForm.attributes.class.value == 'mini-cart') continue;\r\n                if (testForm.attributes && testForm.attributes.action && testForm.attributes.action.value.indexOf('/checkout') > -1\r\n                    && testForm.attributes.action.value.indexOf('/add') < 0\r\n                ) { // We have a winner\r\n                    return jqCR(testForm)[0];\r\n                };\r\n            };\r\n        }\r\n\r\n        return '';\r\n    },\r\n\r\n    settings: function(){\r\n        return storePickupSettings;\r\n    },\r\n\r\n    injectButton: function(callback){\r\n        var that = this;\r\n        var checkExist = setInterval(function() {\r\n            //console.log('checking')\r\n            if (jqCR('#pickup-container').length) {\r\n                jqCR('#pickup-container').css('display', 'flex');\r\n                //console.log(\"Exists!\");\r\n                clearInterval(checkExist);\r\n                callback();\r\n            }\r\n        }, 100);\r\n\r\n        // if (jqCR('#pickup-container').length) {\r\n        //     jqCR('#pickup-container').css('display', 'flex');\r\n        //     callback();\r\n        // }\r\n    },\r\n\r\n    storesTemplate: function(){\r\n        var that = this;\r\n        return '<div id=\"store-search\">' +\r\n            that.translations[that.language].chooseLocation +\r\n            //'<label for=\"pickup-store-search\">' + that.translations[that.language].pickupStore + '</label>' +\r\n            //'<input type=\"text\" name=\"pickup-store-search\" ' + 'id=\"pickup-store-search\" onkeyup=\"storePickup.storeFilter()\" ' + 'placeholder=\"' +  that.translations[that.language].chooseLocation +'\">' +\r\n            '<input type=\"hidden\" name=\"pickup-store\" id=\"pickup-store\">' +\r\n            '\x3c!-- Where store value gets saved for validation --\x3e' +\r\n            '<ul id=\"storeUL\"></ul>' +\r\n            '</div>';\r\n    },\r\n\r\n    storesTemplateSelect: function(){\r\n        var that = this;\r\n        return '<div id=\"store-search\">' +\r\n            that.translations[that.language].chooseLocation +\r\n            '\x3c!-- Where store value gets saved for validation --\x3e' +\r\n            '<input type=\"hidden\" name=\"pickup-store\" id=\"pickup-store\">' +\r\n            '<select id=\"storeUL\"></select>' +\r\n            '</div>';\r\n    },\r\n\r\n    getDeliveryMethod: function() {\r\n        let deliveryMethod = null;\r\n\r\n        if (jqCR('.cr-shipping-method').hasClass('selected')){\r\n            deliveryMethod = 'shipping'\r\n        }\r\n\r\n        if (jqCR('.cr-delivery-button').hasClass('selected')){\r\n            deliveryMethod = 'delivery'\r\n        }\r\n\r\n        if (jqCR('.js-toggle-pickup').hasClass('selected')){\r\n            deliveryMethod = 'pickup'\r\n        }\r\n        return deliveryMethod;\r\n    },\r\n\r\n    beacon: function() {\r\n        console.log('Beacon active')\r\n        // Submit button, beacon data\r\n        const body = jqCR('body');\r\n        body.on('click', '[name=checkout]', async function(e){\r\n            e.preventDefault();\r\n            const deliveryMethod = storePickup.getDeliveryMethod();\r\n            const pickupDate = jqCR('#note-pickup-date').val();\r\n            const pickupTime = jqCR('#note-pickup-time').val();\r\n            const locationName = jqCR('#pickup-selected-store').val();\r\n            const locationId = jqCR('#pickup-selected-store-id').val();\r\n\r\n            const deliveryDate = jqCR('#note-delivery-date').val();\r\n            const deliveryTime = jqCR('#note-delivery-time').val();\r\n            const deliveryZip = jqCR('#cr-delivery-zip').val();\r\n\r\n            const cart = await storePickup.getCartItems();\r\n            let data = new FormData();\r\n            data.append('cart', JSON.stringify(cart));\r\n            data.append('cartToken', cart.token);\r\n            data.append('store', CRpermanentDomain);\r\n            data.append('deliveryMethod', deliveryMethod);\r\n            data.append('pickupDate', pickupDate);\r\n            data.append('pickupTime', pickupTime);\r\n            data.append('locationName', locationName);\r\n            data.append('locationId', locationId);\r\n\r\n            data.append('deliveryDate', deliveryDate);\r\n            data.append('deliveryTime', deliveryTime);\r\n            data.append('deliveryZip', deliveryZip);\r\n\r\n            data.append('numberOfItems', cart.item_count);\r\n            let url = 'https://beacon.thecreativer.com/logs/save';\r\n            navigator.sendBeacon(url, data);\r\n            jqCR('#pickup-container').closest('form').submit()\r\n        });\r\n    }\r\n};\r\n\r\n(function(){\r\n    if (typeof CRpermanentDomain !== \"undefined\" && CRpermanentDomain == 'function-fringe.myshopify.com' && document.location.href.indexOf('/cart') < 0){\r\n        return;\r\n    }\r\n    //console.log(document.currentScript.src)\r\n    if (typeof storePickupLoaded !== \"undefined\"){\r\n        if (storePickupLoaded === true) return;\r\n        storePickupLoaded = true;\r\n    }\r\n\r\n    if (typeof pickupLocale === \"undefined\") {\r\n        return;\r\n    }\r\n\r\n    var loadScript = function(url, callback){\r\n        var script = document.createElement(\"script\");\r\n        script.type = \"text/javascript\";\r\n\r\n        // If the browser is Internet Explorer.\r\n        if (script.readyState){\r\n            script.onreadystatechange = function(){\r\n                if (script.readyState == \"loaded\" || script.readyState == \"complete\"){\r\n                    script.onreadystatechange = null;\r\n                    callback();\r\n                }\r\n            };\r\n            // For any other browser.\r\n        } else {\r\n            script.onload = function(){\r\n                callback();\r\n            };\r\n        }\r\n\r\n        script.src = url;\r\n        document.getElementsByTagName(\"head\")[0].appendChild(script);\r\n    };\r\n\r\n    // Load inline css\r\n    (function(css){\r\n        var head = document.getElementsByTagName('head')[0];\r\n        var s = document.createElement('style');\r\n        s.setAttribute('type', 'text/css');\r\n        s.appendChild(document.createTextNode(css));\r\n        head.appendChild(s);\r\n    })(css);\r\n\r\n    //load link css\r\n    (function(linkCss){\r\n        var link = document.createElement('link');\r\n        link.setAttribute('rel', 'stylesheet');\r\n        link.setAttribute('type', 'text/css');\r\n        link.setAttribute('href', linkCss );\r\n        document.getElementsByTagName('head')[0].appendChild(link)\r\n    })('https://cdn.thecreativer.com/css/classic.css');\r\n\r\n    var myAppJavaScript = function(jqueryCR){\r\n        window.jqCR = jqueryCR;\r\n\r\n        var crJQEvent = document.createEvent('Event');\r\n        crJQEvent.initEvent('crJQActivated', true, true);\r\n        document.dispatchEvent(crJQEvent);\r\n        if (typeof crBeacon !== \"undefined\" && crBeacon === true) {\r\n            storePickup.beacon()\r\n        }\r\n\r\n        var scriptUrl = '';\r\n        if (pickupLocale === 'fr'){\r\n            //scriptUrl = 'https://cdn.jsdelivr.net/combine/npm/pickadate@3.5.6/lib/compressed/picker.min.js,npm/pickadate@3.5.6/lib/compressed/picker.date.min.js,npm/pickadate@3.5.6/lib/compressed/picker.time.min.js,npm/pickadate@3.5.6/lib/translations/fr_FR.min.js';\r\n            scriptUrl = 'https://cdn.thecreativer.com/js/creativer-store-pickup-libs-fr.js?v=1.05'\r\n        } else if (pickupLocale === 'da'){\r\n            scriptUrl = 'https://cdn.thecreativer.com/js/creativer-store-pickup-libs-da.js?v=1.05'\r\n        } else if (pickupLocale === 'pt-PT'){\r\n            scriptUrl = 'https://cdn.thecreativer.com/js/creativer-store-pickup-libs-pt.js?v=1.05'\r\n        } else if (pickupLocale === 'nl'){\r\n            scriptUrl = 'https://cdn.thecreativer.com/js/creativer-store-pickup-libs-nl.js?v=1.05'\r\n        } else if (pickupLocale === 'de'){\r\n            scriptUrl = 'https://cdn.thecreativer.com/js/creativer-store-pickup-libs-de.js?v=1.05'\r\n        } else if (pickupLocale === 'nb'){\r\n            scriptUrl = 'https://cdn.thecreativer.com/js/creativer-store-pickup-libs-nb.js?v=1.05'\r\n        } else {\r\n            //scriptUrl = 'https://cdn.jsdelivr.net/combine/npm/pickadate@3.5.6/lib/compressed/picker.min.js,npm/pickadate@3.5.6/lib/compressed/picker.date.min.js,npm/pickadate@3.5.6/lib/compressed/picker.time.min.js';\r\n            scriptUrl = 'https://cdn.thecreativer.com/js/creativer-store-pickup-libs.js?v=1.05'\r\n        }\r\n\r\n        loadScript(scriptUrl, function(){\r\n            window.jqCR(document).ready(function() {\r\n                // Initialize Store Pickup Option\r\n                if (typeof requestStores !== \"undefined\" && requestStores === true) {\r\n                    window.jqCR.get(appUrl + 'stores/get?store=' + CRpermanentDomain, function(response){\r\n                        window.stores = response.stores;\r\n                        storePickup.init(window.jqCR);\r\n                    })\r\n                } else {\r\n                    storePickup.init(window.jqCR);\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    // Check jquery version\r\n    console.log('Loading ...');\r\n    loadScript('//code.jquery.com/jquery-3.5.1.min.js', function(){\r\n        var jQuery351 = jQuery.noConflict(true);\r\n\r\n        myAppJavaScript(jQuery351);\r\n    });\r\n\r\n})();\n\n//# sourceURL=webpack:///./src/includes/storepickup.js?")},"./src/index.js":function(module,exports,__webpack_require__){eval("// don't insert axios directly, it was creating issues for this store: articledublin.com\r\n//require('./includes/axios.min.js');\r\ndocument.querySelector('#pickup-container').style.display = 'flex'\r\nvar pickupButtonSpan = document.querySelector('.pickup-button > span');\r\nif (pickupButtonSpan) {\r\n    pickupButtonSpan.innerHTML = '<div class=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>';\r\n}\r\n\r\nvar pickupLoadingContainer = document.querySelector('.pickup-loading');\r\nif (pickupLoadingContainer) {\r\n    pickupLoadingContainer.innerHTML = '<div class=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>';\r\n}\r\n\r\nvar pickupContainer = document.getElementById(\"pickup-container\");\r\nvar storeForm = pickupContainer.closest(\"form\");\r\naxios.get(appUrl + 'isInstalled', {\r\n    params: {\r\n        shop: \"{{ shop.permanent_domain }}\"\r\n    }\r\n}).then(function(response) {\r\n    if (response.data.status == '404'){\r\n        // var elem = document.querySelector('#pickup-container');\r\n        // elem.parentNode.removeChild(elem);\r\n    } else {\r\n        //console.log('cart')\r\n        //require('./includes/init.js');\r\n        __webpack_require__(/*! ./includes/storepickup.js */ \"./src/includes/storepickup.js\");\r\n    }\r\n}).catch(function (error) {\r\n    console.log(error);\r\n})\r\n\n\n//# sourceURL=webpack:///./src/index.js?")}})</script>